
EEPROM Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08002ddc  08002ddc  00012ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  2000000c  0800322c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000180  0800322c  00020180  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c274  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d79  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005aac  00000000  00000000  0002e029  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000788  00000000  00000000  00033ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b90  00000000  00000000  00034260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004d6a  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003129  00000000  00000000  00039b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003cc83  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000162c  00000000  00000000  0003cd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002dc4 	.word	0x08002dc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002dc4 	.word	0x08002dc4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8aa 	bl	8000658 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f002 faac 	bl	8002ab4 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfad      	iteet	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	bfb5      	itete	lt
 8000626:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db08      	blt.n	8000652 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000640:	0942      	lsrs	r2, r0, #5
 8000642:	2301      	movs	r3, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	fa03 f000 	lsl.w	r0, r3, r0
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_NVIC_EnableIRQ+0x18>)
 800064e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000684:	6803      	ldr	r3, [r0, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800068c:	f023 0303 	bic.w	r3, r3, #3
 8000690:	2118      	movs	r1, #24
 8000692:	3a10      	subs	r2, #16
 8000694:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800069a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800069c:	bf88      	it	hi
 800069e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006a2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	08002dec 	.word	0x08002dec

080006b0 <HAL_DMA_Init>:
{
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ff62 	bl	800057c <HAL_GetTick>
 80006b8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006ba:	2c00      	cmp	r4, #0
 80006bc:	d071      	beq.n	80007a2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006be:	2300      	movs	r3, #0
 80006c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006c4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006d4:	6821      	ldr	r1, [r4, #0]
 80006d6:	680b      	ldr	r3, [r1, #0]
 80006d8:	07d8      	lsls	r0, r3, #31
 80006da:	d43c      	bmi.n	8000756 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006dc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006de:	4d32      	ldr	r5, [pc, #200]	; (80007a8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006e0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006e2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006e4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006e6:	68a3      	ldr	r3, [r4, #8]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	68e2      	ldr	r2, [r4, #12]
 80006ec:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ee:	6922      	ldr	r2, [r4, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	6962      	ldr	r2, [r4, #20]
 80006f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006f6:	69e2      	ldr	r2, [r4, #28]
 80006f8:	4303      	orrs	r3, r0
 80006fa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006fc:	6a22      	ldr	r2, [r4, #32]
 80006fe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000702:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000704:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000708:	bf01      	itttt	eq
 800070a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800070c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800070e:	4335      	orreq	r5, r6
 8000710:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000712:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000714:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000716:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000718:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800071c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000720:	d10b      	bne.n	800073a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000724:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000726:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000728:	b13d      	cbz	r5, 800073a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800072a:	b9f8      	cbnz	r0, 800076c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800072c:	2a01      	cmp	r2, #1
 800072e:	d02d      	beq.n	800078c <HAL_DMA_Init+0xdc>
 8000730:	d301      	bcc.n	8000736 <HAL_DMA_Init+0x86>
 8000732:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000734:	d101      	bne.n	800073a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000736:	01ea      	lsls	r2, r5, #7
 8000738:	d42b      	bmi.n	8000792 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800073a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800073c:	4620      	mov	r0, r4
 800073e:	f7ff ffa1 	bl	8000684 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000742:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000744:	233f      	movs	r3, #63	; 0x3f
 8000746:	4093      	lsls	r3, r2
 8000748:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800074c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000750:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000754:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000756:	f7ff ff11 	bl	800057c <HAL_GetTick>
 800075a:	1b40      	subs	r0, r0, r5
 800075c:	2805      	cmp	r0, #5
 800075e:	d9b9      	bls.n	80006d4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000760:	2320      	movs	r3, #32
 8000762:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000764:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000766:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800076a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800076c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000770:	d113      	bne.n	800079a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000772:	2a03      	cmp	r2, #3
 8000774:	d8e1      	bhi.n	800073a <HAL_DMA_Init+0x8a>
 8000776:	a001      	add	r0, pc, #4	; (adr r0, 800077c <HAL_DMA_Init+0xcc>)
 8000778:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800077c:	08000793 	.word	0x08000793
 8000780:	08000737 	.word	0x08000737
 8000784:	08000793 	.word	0x08000793
 8000788:	0800078d 	.word	0x0800078d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800078c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000790:	d1d3      	bne.n	800073a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000796:	2001      	movs	r0, #1
 8000798:	e7e5      	b.n	8000766 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800079a:	2a02      	cmp	r2, #2
 800079c:	d9f9      	bls.n	8000792 <HAL_DMA_Init+0xe2>
 800079e:	2a03      	cmp	r2, #3
 80007a0:	e7c8      	b.n	8000734 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80007a2:	2001      	movs	r0, #1
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	bf00      	nop
 80007a8:	f010803f 	.word	0xf010803f

080007ac <HAL_DMA_Start_IT>:
{
 80007ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80007ae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80007b2:	2c01      	cmp	r4, #1
 80007b4:	d036      	beq.n	8000824 <HAL_DMA_Start_IT+0x78>
 80007b6:	2401      	movs	r4, #1
 80007b8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80007bc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80007c2:	2c01      	cmp	r4, #1
 80007c4:	f04f 0500 	mov.w	r5, #0
 80007c8:	f04f 0402 	mov.w	r4, #2
 80007cc:	d128      	bne.n	8000820 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ce:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007d2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007d6:	6825      	ldr	r5, [r4, #0]
 80007d8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80007dc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80007de:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007e0:	6883      	ldr	r3, [r0, #8]
 80007e2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80007e4:	bf0e      	itee	eq
 80007e6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80007e8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80007ea:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80007ee:	bf08      	it	eq
 80007f0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	4093      	lsls	r3, r2
 80007f6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	f043 0316 	orr.w	r3, r3, #22
 80007fe:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000800:	6963      	ldr	r3, [r4, #20]
 8000802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000806:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000808:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800080a:	b11b      	cbz	r3, 8000814 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800081c:	2000      	movs	r0, #0
 800081e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000820:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000824:	2002      	movs	r0, #2
}
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000828:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800082c:	2b02      	cmp	r3, #2
 800082e:	d003      	beq.n	8000838 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000834:	2001      	movs	r0, #1
 8000836:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000838:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800083a:	2305      	movs	r3, #5
 800083c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000848:	2000      	movs	r0, #0
}
 800084a:	4770      	bx	lr

0800084c <HAL_DMA_IRQHandler>:
{
 800084c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800084e:	2300      	movs	r3, #0
 8000850:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000854:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000856:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000858:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800085a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800085c:	2208      	movs	r2, #8
 800085e:	409a      	lsls	r2, r3
 8000860:	4216      	tst	r6, r2
{
 8000862:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000864:	d00c      	beq.n	8000880 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000866:	6801      	ldr	r1, [r0, #0]
 8000868:	6808      	ldr	r0, [r1, #0]
 800086a:	0740      	lsls	r0, r0, #29
 800086c:	d508      	bpl.n	8000880 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800086e:	6808      	ldr	r0, [r1, #0]
 8000870:	f020 0004 	bic.w	r0, r0, #4
 8000874:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000876:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000878:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000880:	2201      	movs	r2, #1
 8000882:	409a      	lsls	r2, r3
 8000884:	4216      	tst	r6, r2
 8000886:	d008      	beq.n	800089a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000888:	6821      	ldr	r1, [r4, #0]
 800088a:	6949      	ldr	r1, [r1, #20]
 800088c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800088e:	bf41      	itttt	mi
 8000890:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000892:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000894:	f042 0202 	orrmi.w	r2, r2, #2
 8000898:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800089a:	2204      	movs	r2, #4
 800089c:	409a      	lsls	r2, r3
 800089e:	4216      	tst	r6, r2
 80008a0:	d008      	beq.n	80008b4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80008a2:	6821      	ldr	r1, [r4, #0]
 80008a4:	6809      	ldr	r1, [r1, #0]
 80008a6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008a8:	bf41      	itttt	mi
 80008aa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008ac:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008ae:	f042 0204 	orrmi.w	r2, r2, #4
 80008b2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008b4:	2210      	movs	r2, #16
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4216      	tst	r6, r2
 80008ba:	d010      	beq.n	80008de <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	0709      	lsls	r1, r1, #28
 80008c2:	d50c      	bpl.n	80008de <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008c4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	0350      	lsls	r0, r2, #13
 80008ca:	d535      	bpl.n	8000938 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	0319      	lsls	r1, r3, #12
 80008d0:	d401      	bmi.n	80008d6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80008d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d4:	e000      	b.n	80008d8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80008d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80008d8:	b10b      	cbz	r3, 80008de <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80008da:	4620      	mov	r0, r4
 80008dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80008de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80008e0:	2220      	movs	r2, #32
 80008e2:	408a      	lsls	r2, r1
 80008e4:	4216      	tst	r6, r2
 80008e6:	d038      	beq.n	800095a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	06c6      	lsls	r6, r0, #27
 80008ee:	d534      	bpl.n	800095a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80008f0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008f2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80008f6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008f8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008fa:	d125      	bne.n	8000948 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008fc:	f022 0216 	bic.w	r2, r2, #22
 8000900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000908:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800090a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800090c:	b90a      	cbnz	r2, 8000912 <HAL_DMA_IRQHandler+0xc6>
 800090e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000910:	b11a      	cbz	r2, 800091a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f022 0208 	bic.w	r2, r2, #8
 8000918:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800091a:	233f      	movs	r3, #63	; 0x3f
 800091c:	408b      	lsls	r3, r1
 800091e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000920:	2300      	movs	r3, #0
 8000922:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000926:	2301      	movs	r3, #1
 8000928:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800092c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800092e:	b10b      	cbz	r3, 8000934 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000930:	4620      	mov	r0, r4
 8000932:	4798      	blx	r3
}
 8000934:	b003      	add	sp, #12
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800093c:	bf5e      	ittt	pl
 800093e:	681a      	ldrpl	r2, [r3, #0]
 8000940:	f022 0208 	bicpl.w	r2, r2, #8
 8000944:	601a      	strpl	r2, [r3, #0]
 8000946:	e7c4      	b.n	80008d2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000948:	0350      	lsls	r0, r2, #13
 800094a:	d528      	bpl.n	800099e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	0319      	lsls	r1, r3, #12
 8000950:	d432      	bmi.n	80009b8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000952:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000954:	b10b      	cbz	r3, 800095a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000956:	4620      	mov	r0, r4
 8000958:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800095a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0e9      	beq.n	8000934 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000960:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000962:	07da      	lsls	r2, r3, #31
 8000964:	d519      	bpl.n	800099a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000966:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000968:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800096a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	f023 0301 	bic.w	r3, r3, #1
 8000974:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000976:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800097a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	429f      	cmp	r7, r3
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	d302      	bcc.n	800098e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	07db      	lsls	r3, r3, #31
 800098c:	d4f7      	bmi.n	800097e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800098e:	2300      	movs	r3, #0
 8000990:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000994:	2301      	movs	r3, #1
 8000996:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800099a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800099c:	e7c7      	b.n	800092e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80009a4:	d108      	bne.n	80009b8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	f021 0110 	bic.w	r1, r1, #16
 80009ac:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80009ae:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80009b0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80009b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009ba:	e7cb      	b.n	8000954 <HAL_DMA_IRQHandler+0x108>
 80009bc:	20000008 	.word	0x20000008

080009c0 <HAL_DMA_GetState>:
  return hdma->State;
 80009c0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80009c4:	4770      	bx	lr

080009c6 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80009c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80009c8:	4770      	bx	lr
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000b74 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d8:	4a64      	ldr	r2, [pc, #400]	; (8000b6c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80009dc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009e0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80009e4:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e8:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80009ec:	42b7      	cmp	r7, r6
 80009ee:	f040 80ad 	bne.w	8000b4c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	684c      	ldr	r4, [r1, #4]
 80009f4:	f024 0a10 	bic.w	sl, r4, #16
 80009f8:	f1ba 0f02 	cmp.w	sl, #2
 80009fc:	d116      	bne.n	8000a2c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80009fe:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a02:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a06:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a0a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a12:	f04f 0e0f 	mov.w	lr, #15
 8000a16:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000a1a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a1e:	690d      	ldr	r5, [r1, #16]
 8000a20:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a24:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a28:	f8cc 5020 	str.w	r5, [ip, #32]
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a30:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a32:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a36:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a3a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a3c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a40:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a44:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a48:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a4c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a50:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a54:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000a56:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5a:	d815      	bhi.n	8000a88 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000a5c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a60:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a64:	68cd      	ldr	r5, [r1, #12]
 8000a66:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000a6a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000a6e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a72:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a76:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a7a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000a7e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a82:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000a86:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a88:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a8a:	9d00      	ldr	r5, [sp, #0]
 8000a8c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a8e:	688f      	ldr	r7, [r1, #8]
 8000a90:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a94:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a96:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a98:	00e5      	lsls	r5, r4, #3
 8000a9a:	d557      	bpl.n	8000b4c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9c:	f04f 0b00 	mov.w	fp, #0
 8000aa0:	f8cd b00c 	str.w	fp, [sp, #12]
 8000aa4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa8:	4d31      	ldr	r5, [pc, #196]	; (8000b70 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000aae:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ab2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ab6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000aba:	9703      	str	r7, [sp, #12]
 8000abc:	9f03      	ldr	r7, [sp, #12]
 8000abe:	f023 0703 	bic.w	r7, r3, #3
 8000ac2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ac6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aca:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ace:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ad6:	f04f 0e0f 	mov.w	lr, #15
 8000ada:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ade:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae4:	d039      	beq.n	8000b5a <HAL_GPIO_Init+0x18e>
 8000ae6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aea:	42a8      	cmp	r0, r5
 8000aec:	d037      	beq.n	8000b5e <HAL_GPIO_Init+0x192>
 8000aee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000af2:	42a8      	cmp	r0, r5
 8000af4:	d035      	beq.n	8000b62 <HAL_GPIO_Init+0x196>
 8000af6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000afa:	42a8      	cmp	r0, r5
 8000afc:	d033      	beq.n	8000b66 <HAL_GPIO_Init+0x19a>
 8000afe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	bf14      	ite	ne
 8000b06:	2507      	movne	r5, #7
 8000b08:	2504      	moveq	r5, #4
 8000b0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b0e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b12:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b14:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b18:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b1c:	bf0c      	ite	eq
 8000b1e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b20:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b22:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b24:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	bf0c      	ite	eq
 8000b2c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b2e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b30:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b32:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b38:	bf0c      	ite	eq
 8000b3a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b3c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b3e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b40:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b42:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b44:	bf54      	ite	pl
 8000b46:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b48:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b4a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	2b10      	cmp	r3, #16
 8000b50:	f47f af47 	bne.w	80009e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b54:	b005      	add	sp, #20
 8000b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5a:	465d      	mov	r5, fp
 8000b5c:	e7d5      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b5e:	2501      	movs	r5, #1
 8000b60:	e7d3      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b62:	2502      	movs	r5, #2
 8000b64:	e7d1      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b66:	2503      	movs	r5, #3
 8000b68:	e7cf      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b6a:	bf00      	nop
 8000b6c:	40013c00 	.word	0x40013c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	b10a      	cbz	r2, 8000b7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b7a:	6181      	str	r1, [r0, #24]
 8000b7c:	4770      	bx	lr
 8000b7e:	0409      	lsls	r1, r1, #16
 8000b80:	e7fb      	b.n	8000b7a <HAL_GPIO_WritePin+0x2>

08000b82 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	694b      	ldr	r3, [r1, #20]
 8000b86:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	d010      	beq.n	8000bb2 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b90:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000b94:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b96:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000b98:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b9e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ba2:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ba4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
 8000bb0:	4770      	bx	lr
  }
  return HAL_OK;
 8000bb2:	4618      	mov	r0, r3
}
 8000bb4:	4770      	bx	lr

08000bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000bb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bba:	4604      	mov	r4, r0
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000bc0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000bc4:	b28e      	uxth	r6, r1
 8000bc6:	6825      	ldr	r5, [r4, #0]
 8000bc8:	f1b8 0f01 	cmp.w	r8, #1
 8000bcc:	bf0c      	ite	eq
 8000bce:	696b      	ldreq	r3, [r5, #20]
 8000bd0:	69ab      	ldrne	r3, [r5, #24]
 8000bd2:	ea36 0303 	bics.w	r3, r6, r3
 8000bd6:	bf14      	ite	ne
 8000bd8:	2001      	movne	r0, #1
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	b908      	cbnz	r0, 8000be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000be2:	696b      	ldr	r3, [r5, #20]
 8000be4:	055a      	lsls	r2, r3, #21
 8000be6:	d516      	bpl.n	8000c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bf0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000bf4:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000bf6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000bfc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000c04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c06:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c0a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000c10:	2001      	movs	r0, #1
 8000c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000c16:	1c7b      	adds	r3, r7, #1
 8000c18:	d0d5      	beq.n	8000bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c1a:	f7ff fcaf 	bl	800057c <HAL_GetTick>
 8000c1e:	eba0 0009 	sub.w	r0, r0, r9
 8000c22:	4287      	cmp	r7, r0
 8000c24:	d301      	bcc.n	8000c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000c26:	2f00      	cmp	r7, #0
 8000c28:	d1cd      	bne.n	8000bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c2a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c2c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c2e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c3a:	f042 0220 	orr.w	r2, r2, #32
 8000c3e:	e7e4      	b.n	8000c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000c40 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c44:	9e08      	ldr	r6, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	4690      	mov	r8, r2
 8000c4a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c4c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000c50:	b28d      	uxth	r5, r1
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	f1b9 0f01 	cmp.w	r9, #1
 8000c58:	bf0c      	ite	eq
 8000c5a:	695b      	ldreq	r3, [r3, #20]
 8000c5c:	699b      	ldrne	r3, [r3, #24]
 8000c5e:	ea35 0303 	bics.w	r3, r5, r3
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	4543      	cmp	r3, r8
 8000c6a:	d002      	beq.n	8000c72 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000c6c:	2000      	movs	r0, #0
}
 8000c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000c72:	1c7b      	adds	r3, r7, #1
 8000c74:	d0ed      	beq.n	8000c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c76:	f7ff fc81 	bl	800057c <HAL_GetTick>
 8000c7a:	1b80      	subs	r0, r0, r6
 8000c7c:	4287      	cmp	r7, r0
 8000c7e:	d301      	bcc.n	8000c84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000c80:	2f00      	cmp	r7, #0
 8000c82:	d1e6      	bne.n	8000c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c84:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c92:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c98:	f042 0220 	orr.w	r2, r2, #32
 8000c9c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	460d      	mov	r5, r1
 8000caa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	061b      	lsls	r3, r3, #24
 8000cb2:	d501      	bpl.n	8000cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff ff62 	bl	8000b82 <I2C_IsAcknowledgeFailed>
 8000cbe:	b9a8      	cbnz	r0, 8000cec <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000cc0:	1c6a      	adds	r2, r5, #1
 8000cc2:	d0f3      	beq.n	8000cac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cc4:	f7ff fc5a 	bl	800057c <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	4285      	cmp	r5, r0
 8000ccc:	d301      	bcc.n	8000cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d1ec      	bne.n	8000cac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cd2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cd4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cd6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ce0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ce2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ce6:	f042 0220 	orr.w	r2, r2, #32
 8000cea:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000cec:	2001      	movs	r0, #1
}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}

08000cf0 <I2C_RequestMemoryWrite>:
{
 8000cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000cf4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000cf6:	6802      	ldr	r2, [r0, #0]
{
 8000cf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000cfa:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
{
 8000d04:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d06:	9600      	str	r6, [sp, #0]
 8000d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000d10:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d12:	f7ff ff95 	bl	8000c40 <I2C_WaitOnFlagUntilTimeout>
 8000d16:	b118      	cbz	r0, 8000d20 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
}
 8000d1a:	b004      	add	sp, #16
 8000d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d20:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d24:	4918      	ldr	r1, [pc, #96]	; (8000d88 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d26:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000d2a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4633      	mov	r3, r6
 8000d30:	f7ff ff41 	bl	8000bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1ef      	bne.n	8000d18 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	9003      	str	r0, [sp, #12]
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	9203      	str	r2, [sp, #12]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d44:	4632      	mov	r2, r6
 8000d46:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d48:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff ffaa 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d50:	b140      	cbz	r0, 8000d64 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d54:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d56:	bf01      	itttt	eq
 8000d58:	6822      	ldreq	r2, [r4, #0]
 8000d5a:	6813      	ldreq	r3, [r2, #0]
 8000d5c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000d60:	6013      	streq	r3, [r2, #0]
 8000d62:	e7d9      	b.n	8000d18 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000d64:	f1b8 0f01 	cmp.w	r8, #1
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	d102      	bne.n	8000d72 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000d6c:	b2ed      	uxtb	r5, r5
 8000d6e:	611d      	str	r5, [r3, #16]
 8000d70:	e7d3      	b.n	8000d1a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000d72:	0a2a      	lsrs	r2, r5, #8
 8000d74:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d78:	4632      	mov	r2, r6
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff ff92 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d1e6      	bne.n	8000d52 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	e7f1      	b.n	8000d6c <I2C_RequestMemoryWrite+0x7c>
 8000d88:	00010002 	.word	0x00010002

08000d8c <I2C_RequestMemoryRead>:
{
 8000d8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000d90:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d92:	6803      	ldr	r3, [r0, #0]
{
 8000d94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d96:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d9e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da6:	601a      	str	r2, [r3, #0]
{
 8000da8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000daa:	9500      	str	r5, [sp, #0]
 8000dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dae:	2200      	movs	r2, #0
 8000db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000db4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000db6:	f7ff ff43 	bl	8000c40 <I2C_WaitOnFlagUntilTimeout>
 8000dba:	b118      	cbz	r0, 8000dc4 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	b004      	add	sp, #16
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000dc4:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dc6:	492b      	ldr	r1, [pc, #172]	; (8000e74 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000dc8:	b2ff      	uxtb	r7, r7
 8000dca:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000dce:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	462b      	mov	r3, r5
 8000dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000dd6:	f7ff feee 	bl	8000bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d1ee      	bne.n	8000dbc <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	9003      	str	r0, [sp, #12]
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	9203      	str	r2, [sp, #12]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dea:	462a      	mov	r2, r5
 8000dec:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff ff57 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000df6:	b140      	cbz	r0, 8000e0a <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dfa:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dfc:	bf01      	itttt	eq
 8000dfe:	6822      	ldreq	r2, [r4, #0]
 8000e00:	6813      	ldreq	r3, [r2, #0]
 8000e02:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000e06:	6013      	streq	r3, [r2, #0]
 8000e08:	e7d8      	b.n	8000dbc <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e0a:	f1b8 0f01 	cmp.w	r8, #1
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	d125      	bne.n	8000e5e <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e12:	b2f6      	uxtb	r6, r6
 8000e14:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e16:	462a      	mov	r2, r5
 8000e18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff ff42 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e20:	4602      	mov	r2, r0
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d1e8      	bne.n	8000df8 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e26:	6821      	ldr	r1, [r4, #0]
 8000e28:	680b      	ldr	r3, [r1, #0]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e30:	4620      	mov	r0, r4
 8000e32:	9500      	str	r5, [sp, #0]
 8000e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e3a:	f7ff ff01 	bl	8000c40 <I2C_WaitOnFlagUntilTimeout>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d1bc      	bne.n	8000dbc <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000e42:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e46:	490b      	ldr	r1, [pc, #44]	; (8000e74 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000e48:	f047 0701 	orr.w	r7, r7, #1
 8000e4c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e4e:	4620      	mov	r0, r4
 8000e50:	462b      	mov	r3, r5
 8000e52:	f7ff feb0 	bl	8000bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8000e56:	3000      	adds	r0, #0
 8000e58:	bf18      	it	ne
 8000e5a:	2001      	movne	r0, #1
 8000e5c:	e7af      	b.n	8000dbe <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000e5e:	0a32      	lsrs	r2, r6, #8
 8000e60:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e64:	462a      	mov	r2, r5
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ff1c 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d1c3      	bne.n	8000df8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	e7ce      	b.n	8000e12 <I2C_RequestMemoryRead+0x86>
 8000e74:	00010002 	.word	0x00010002

08000e78 <HAL_I2C_Init>:
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	b908      	cbnz	r0, 8000e82 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000e7e:	2001      	movs	r0, #1
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e8a:	b91b      	cbnz	r3, 8000e94 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000e8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000e90:	f001 fe30 	bl	8002af4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000e94:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e96:	2324      	movs	r3, #36	; 0x24
 8000e98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e9c:	6813      	ldr	r3, [r2, #0]
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ea4:	f001 fa7e 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ea8:	6865      	ldr	r5, [r4, #4]
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <HAL_I2C_Init+0x138>)
 8000eac:	429d      	cmp	r5, r3
 8000eae:	d84d      	bhi.n	8000f4c <HAL_I2C_Init+0xd4>
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_I2C_Init+0x13c>)
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d9e3      	bls.n	8000e7e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eb6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000eb8:	493f      	ldr	r1, [pc, #252]	; (8000fb8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eba:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ebc:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ec8:	6a13      	ldr	r3, [r2, #32]
 8000eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ece:	3101      	adds	r1, #1
 8000ed0:	4319      	orrs	r1, r3
 8000ed2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ed4:	69d1      	ldr	r1, [r2, #28]
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_I2C_Init+0x138>)
 8000ed8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000edc:	429d      	cmp	r5, r3
 8000ede:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ee2:	f100 30ff 	add.w	r0, r0, #4294967295
 8000ee6:	d848      	bhi.n	8000f7a <HAL_I2C_Init+0x102>
 8000ee8:	006d      	lsls	r5, r5, #1
 8000eea:	fbb0 f0f5 	udiv	r0, r0, r5
 8000eee:	3001      	adds	r0, #1
 8000ef0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	bf38      	it	cc
 8000ef8:	2304      	movcc	r3, #4
 8000efa:	430b      	orrs	r3, r1
 8000efc:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000efe:	6811      	ldr	r1, [r2, #0]
 8000f00:	6a20      	ldr	r0, [r4, #32]
 8000f02:	69e3      	ldr	r3, [r4, #28]
 8000f04:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f08:	4303      	orrs	r3, r0
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f0e:	6891      	ldr	r1, [r2, #8]
 8000f10:	68e0      	ldr	r0, [r4, #12]
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f18:	4303      	orrs	r3, r0
 8000f1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f22:	68d1      	ldr	r1, [r2, #12]
 8000f24:	69a0      	ldr	r0, [r4, #24]
 8000f26:	6963      	ldr	r3, [r4, #20]
 8000f28:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f2c:	4303      	orrs	r3, r0
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f3a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f3c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f3e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f46:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_I2C_Init+0x144>)
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d995      	bls.n	8000e7e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f52:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f54:	4e18      	ldr	r6, [pc, #96]	; (8000fb8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f56:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f58:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f60:	4333      	orrs	r3, r6
 8000f62:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f64:	6a13      	ldr	r3, [r2, #32]
 8000f66:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f6a:	4371      	muls	r1, r6
 8000f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f70:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000f74:	fbb1 f1f6 	udiv	r1, r1, r6
 8000f78:	e7a9      	b.n	8000ece <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f7a:	68a3      	ldr	r3, [r4, #8]
 8000f7c:	b953      	cbnz	r3, 8000f94 <HAL_I2C_Init+0x11c>
 8000f7e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8c:	b16b      	cbz	r3, 8000faa <HAL_I2C_Init+0x132>
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	e7b2      	b.n	8000efa <HAL_I2C_Init+0x82>
 8000f94:	2319      	movs	r3, #25
 8000f96:	436b      	muls	r3, r5
 8000f98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	b113      	cbz	r3, 8000faa <HAL_I2C_Init+0x132>
 8000fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa8:	e7a7      	b.n	8000efa <HAL_I2C_Init+0x82>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e7a5      	b.n	8000efa <HAL_I2C_Init+0x82>
 8000fae:	bf00      	nop
 8000fb0:	000186a0 	.word	0x000186a0
 8000fb4:	001e847f 	.word	0x001e847f
 8000fb8:	000f4240 	.word	0x000f4240
 8000fbc:	003d08ff 	.word	0x003d08ff

08000fc0 <HAL_I2C_Mem_Write_DMA>:
{
 8000fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9302      	str	r3, [sp, #8]
{
 8000fcc:	460f      	mov	r7, r1
 8000fce:	4690      	mov	r8, r2
 8000fd0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8000fd2:	f7ff fad3 	bl	800057c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000fda:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	4682      	mov	sl, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fde:	d003      	beq.n	8000fe8 <HAL_I2C_Mem_Write_DMA+0x28>
    return HAL_BUSY;
 8000fe0:	2002      	movs	r0, #2
}
 8000fe2:	b004      	add	sp, #16
 8000fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_I2C_Mem_Write_DMA+0x134>)
 8000fea:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ff4:	2319      	movs	r3, #25
 8000ff6:	4353      	muls	r3, r2
 8000ff8:	9302      	str	r3, [sp, #8]
      count--;
 8000ffa:	9b02      	ldr	r3, [sp, #8]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	9302      	str	r3, [sp, #8]
      if (count == 0U)
 8001000:	9b02      	ldr	r3, [sp, #8]
 8001002:	b963      	cbnz	r3, 800101e <HAL_I2C_Mem_Write_DMA+0x5e>
        hi2c->State               = HAL_I2C_STATE_READY;
 8001004:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001006:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001008:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800100c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001010:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001012:	f042 0220 	orr.w	r2, r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8001016:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001018:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800101c:	e05e      	b.n	80010dc <HAL_I2C_Mem_Write_DMA+0x11c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800101e:	6822      	ldr	r2, [r4, #0]
 8001020:	6993      	ldr	r3, [r2, #24]
 8001022:	0799      	lsls	r1, r3, #30
 8001024:	d4e9      	bmi.n	8000ffa <HAL_I2C_Mem_Write_DMA+0x3a>
    __HAL_LOCK(hi2c);
 8001026:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800102a:	2b01      	cmp	r3, #1
 800102c:	d0d8      	beq.n	8000fe0 <HAL_I2C_Mem_Write_DMA+0x20>
 800102e:	2301      	movs	r3, #1
 8001030:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001034:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001036:	4930      	ldr	r1, [pc, #192]	; (80010f8 <HAL_I2C_Mem_Write_DMA+0x138>)
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001038:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800103a:	bf5e      	ittt	pl
 800103c:	6813      	ldrpl	r3, [r2, #0]
 800103e:	f043 0301 	orrpl.w	r3, r3, #1
 8001042:	6013      	strpl	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800104a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800104c:	2321      	movs	r3, #33	; 0x21
 800104e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001052:	2340      	movs	r3, #64	; 0x40
 8001054:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001058:	2500      	movs	r5, #0
    hi2c->XferCount   = Size;
 800105a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105e:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001060:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001064:	6266      	str	r6, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001066:	b29b      	uxth	r3, r3
 8001068:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800106a:	62e1      	str	r1, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 800106c:	2b00      	cmp	r3, #0
 800106e:	d037      	beq.n	80010e0 <HAL_I2C_Mem_Write_DMA+0x120>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001070:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001072:	4922      	ldr	r1, [pc, #136]	; (80010fc <HAL_I2C_Mem_Write_DMA+0x13c>)
 8001074:	63c1      	str	r1, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001076:	4922      	ldr	r1, [pc, #136]	; (8001100 <HAL_I2C_Mem_Write_DMA+0x140>)
 8001078:	64c1      	str	r1, [r0, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800107a:	6405      	str	r5, [r0, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800107c:	6445      	str	r5, [r0, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800107e:	6485      	str	r5, [r0, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001080:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001082:	3210      	adds	r2, #16
 8001084:	4631      	mov	r1, r6
 8001086:	f7ff fb91 	bl	80007ac <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800108a:	b9e0      	cbnz	r0, 80010c6 <HAL_I2C_Mem_Write_DMA+0x106>
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800108c:	2323      	movs	r3, #35	; 0x23
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	f8cd a004 	str.w	sl, [sp, #4]
 8001094:	464b      	mov	r3, r9
 8001096:	4642      	mov	r2, r8
 8001098:	4639      	mov	r1, r7
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fe28 	bl	8000cf0 <I2C_RequestMemoryWrite>
 80010a0:	b9e0      	cbnz	r0, 80010dc <HAL_I2C_Mem_Write_DMA+0x11c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	9003      	str	r0, [sp, #12]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	9203      	str	r2, [sp, #12]
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	9203      	str	r2, [sp, #12]
 80010ae:	9a03      	ldr	r2, [sp, #12]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80010b0:	685a      	ldr	r2, [r3, #4]
        __HAL_UNLOCK(hi2c);
 80010b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80010b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010c2:	605a      	str	r2, [r3, #4]
        return HAL_OK;
 80010c4:	e78d      	b.n	8000fe2 <HAL_I2C_Mem_Write_DMA+0x22>
        hi2c->State     = HAL_I2C_STATE_READY;
 80010c6:	2320      	movs	r3, #32
 80010c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80010cc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80010d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010d2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
 80010de:	e780      	b.n	8000fe2 <HAL_I2C_Mem_Write_DMA+0x22>
      hi2c->State     = HAL_I2C_STATE_READY;
 80010e0:	2220      	movs	r2, #32
 80010e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80010e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80010ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f0:	e791      	b.n	8001016 <HAL_I2C_Mem_Write_DMA+0x56>
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	ffff0000 	.word	0xffff0000
 80010fc:	080012df 	.word	0x080012df
 8001100:	080012a3 	.word	0x080012a3

08001104 <HAL_I2C_Mem_Read_DMA>:
{
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	4604      	mov	r4, r0
 800110c:	4698      	mov	r8, r3
 800110e:	460e      	mov	r6, r1
 8001110:	4617      	mov	r7, r2
 8001112:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8001116:	f7ff fa31 	bl	800057c <HAL_GetTick>
  __IO uint32_t count = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800111e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001122:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001124:	4681      	mov	r9, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001126:	d003      	beq.n	8001130 <HAL_I2C_Mem_Read_DMA+0x2c>
    return HAL_BUSY;
 8001128:	2002      	movs	r0, #2
}
 800112a:	b006      	add	sp, #24
 800112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001130:	4b54      	ldr	r3, [pc, #336]	; (8001284 <HAL_I2C_Mem_Read_DMA+0x180>)
 8001132:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	fbb3 f2f2 	udiv	r2, r3, r2
 800113c:	2319      	movs	r3, #25
 800113e:	4353      	muls	r3, r2
 8001140:	9303      	str	r3, [sp, #12]
      count--;
 8001142:	9b03      	ldr	r3, [sp, #12]
 8001144:	3b01      	subs	r3, #1
 8001146:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	b96b      	cbnz	r3, 8001168 <HAL_I2C_Mem_Read_DMA+0x64>
        hi2c->State               = HAL_I2C_STATE_READY;
 800114c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800114e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001150:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001154:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001158:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800115a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800115e:	f042 0220 	orr.w	r2, r2, #32
 8001162:	6422      	str	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001164:	2001      	movs	r0, #1
 8001166:	e7e0      	b.n	800112a <HAL_I2C_Mem_Read_DMA+0x26>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001168:	6821      	ldr	r1, [r4, #0]
 800116a:	698b      	ldr	r3, [r1, #24]
 800116c:	079a      	lsls	r2, r3, #30
 800116e:	d4e8      	bmi.n	8001142 <HAL_I2C_Mem_Read_DMA+0x3e>
    __HAL_LOCK(hi2c);
 8001170:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001174:	2b01      	cmp	r3, #1
 8001176:	d0d7      	beq.n	8001128 <HAL_I2C_Mem_Read_DMA+0x24>
 8001178:	2301      	movs	r3, #1
 800117a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800117e:	680b      	ldr	r3, [r1, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001180:	4a41      	ldr	r2, [pc, #260]	; (8001288 <HAL_I2C_Mem_Read_DMA+0x184>)
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001182:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001184:	bf5e      	ittt	pl
 8001186:	680b      	ldrpl	r3, [r1, #0]
 8001188:	f043 0301 	orrpl.w	r3, r3, #1
 800118c:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800118e:	680b      	ldr	r3, [r1, #0]
 8001190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001194:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001196:	2322      	movs	r3, #34	; 0x22
 8001198:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a2:	2500      	movs	r5, #0
    hi2c->XferCount   = Size;
 80011a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a8:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80011aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80011ae:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011b6:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d045      	beq.n	8001248 <HAL_I2C_Mem_Read_DMA+0x144>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80011bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011be:	4a33      	ldr	r2, [pc, #204]	; (800128c <HAL_I2C_Mem_Read_DMA+0x188>)
 80011c0:	63c2      	str	r2, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80011c2:	4a33      	ldr	r2, [pc, #204]	; (8001290 <HAL_I2C_Mem_Read_DMA+0x18c>)
 80011c4:	64c2      	str	r2, [r0, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80011c6:	6405      	str	r5, [r0, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80011c8:	6445      	str	r5, [r0, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80011ca:	6485      	str	r5, [r0, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80011cc:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80011ce:	4652      	mov	r2, sl
 80011d0:	3110      	adds	r1, #16
 80011d2:	f7ff faeb 	bl	80007ac <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d12a      	bne.n	8001230 <HAL_I2C_Mem_Read_DMA+0x12c>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80011da:	2323      	movs	r3, #35	; 0x23
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f8cd 9004 	str.w	r9, [sp, #4]
 80011e2:	4643      	mov	r3, r8
 80011e4:	463a      	mov	r2, r7
 80011e6:	4631      	mov	r1, r6
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff fdcf 	bl	8000d8c <I2C_RequestMemoryRead>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1b8      	bne.n	8001164 <HAL_I2C_Mem_Read_DMA+0x60>
        if (hi2c->XferSize == 1U)
 80011f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	6823      	ldr	r3, [r4, #0]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011f8:	bf0b      	itete	eq
 80011fa:	681a      	ldreq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80011fc:	685a      	ldrne	r2, [r3, #4]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011fe:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001202:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001206:	bf0c      	ite	eq
 8001208:	601a      	streq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800120a:	605a      	strne	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800120c:	2200      	movs	r2, #0
 800120e:	9204      	str	r2, [sp, #16]
 8001210:	6959      	ldr	r1, [r3, #20]
 8001212:	9104      	str	r1, [sp, #16]
 8001214:	6999      	ldr	r1, [r3, #24]
 8001216:	9104      	str	r1, [sp, #16]
 8001218:	9904      	ldr	r1, [sp, #16]
        __HAL_UNLOCK(hi2c);
 800121a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001224:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	e77c      	b.n	800112a <HAL_I2C_Mem_Read_DMA+0x26>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001230:	2320      	movs	r3, #32
 8001232:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001236:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800123a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800123c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6423      	str	r3, [r4, #64]	; 0x40
 8001246:	e78d      	b.n	8001164 <HAL_I2C_Mem_Read_DMA+0x60>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001248:	2323      	movs	r3, #35	; 0x23
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001250:	4643      	mov	r3, r8
 8001252:	463a      	mov	r2, r7
 8001254:	4631      	mov	r1, r6
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fd98 	bl	8000d8c <I2C_RequestMemoryRead>
 800125c:	2800      	cmp	r0, #0
 800125e:	d181      	bne.n	8001164 <HAL_I2C_Mem_Read_DMA+0x60>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	9005      	str	r0, [sp, #20]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	9205      	str	r2, [sp, #20]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	9205      	str	r2, [sp, #20]
 800126c:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001274:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001276:	2320      	movs	r3, #32
 8001278:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800127c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001280:	e753      	b.n	800112a <HAL_I2C_Mem_Read_DMA+0x26>
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	ffff0000 	.word	0xffff0000
 800128c:	080012df 	.word	0x080012df
 8001290:	080012a3 	.word	0x080012a3

08001294 <HAL_I2C_MasterTxCpltCallback>:
 8001294:	4770      	bx	lr

08001296 <HAL_I2C_MasterRxCpltCallback>:
 8001296:	4770      	bx	lr

08001298 <HAL_I2C_SlaveTxCpltCallback>:
 8001298:	4770      	bx	lr

0800129a <HAL_I2C_SlaveRxCpltCallback>:
 800129a:	4770      	bx	lr

0800129c <HAL_I2C_AddrCallback>:
{
 800129c:	4770      	bx	lr

0800129e <HAL_I2C_ListenCpltCallback>:
 800129e:	4770      	bx	lr

080012a0 <HAL_I2C_ErrorCallback>:
 80012a0:	4770      	bx	lr

080012a2 <I2C_DMAError>:
{
 80012a2:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80012a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 80012a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a8:	2500      	movs	r5, #0
 80012aa:	63dd      	str	r5, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80012ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012ae:	63dd      	str	r5, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80012b0:	f7ff fb89 	bl	80009c6 <HAL_DMA_GetError>
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d011      	beq.n	80012dc <I2C_DMAError+0x3a>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012c0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	2320      	movs	r3, #32
    hi2c->XferCount = 0U;
 80012c4:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ca:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80012ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff ffe2 	bl	80012a0 <HAL_I2C_ErrorCallback>
 80012dc:	bd38      	pop	{r3, r4, r5, pc}

080012de <I2C_DMAXferCplt>:
{
 80012de:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80012e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80012e2:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80012e4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80012e8:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80012ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80012ee:	685d      	ldr	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80012f0:	6b66      	ldr	r6, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80012f2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 80012f6:	605d      	str	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80012f8:	2500      	movs	r5, #0
 80012fa:	63f5      	str	r5, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80012fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80012fe:	b2d2      	uxtb	r2, r2
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001300:	63f5      	str	r5, [r6, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8001302:	f002 0521 	and.w	r5, r2, #33	; 0x21
 8001306:	2d21      	cmp	r5, #33	; 0x21
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001308:	b2c0      	uxtb	r0, r0
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800130a:	d005      	beq.n	8001318 <I2C_DMAXferCplt+0x3a>
 800130c:	f002 0522 	and.w	r5, r2, #34	; 0x22
 8001310:	2d22      	cmp	r5, #34	; 0x22
 8001312:	d123      	bne.n	800135c <I2C_DMAXferCplt+0x7e>
 8001314:	2820      	cmp	r0, #32
 8001316:	d121      	bne.n	800135c <I2C_DMAXferCplt+0x7e>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800131e:	6059      	str	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001320:	2a29      	cmp	r2, #41	; 0x29
    hi2c->XferCount = 0U;
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001328:	d10d      	bne.n	8001346 <I2C_DMAXferCplt+0x68>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800132a:	2321      	movs	r3, #33	; 0x21
 800132c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800132e:	2328      	movs	r3, #40	; 0x28
 8001330:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff ffaf 	bl	8001298 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	6853      	ldr	r3, [r2, #4]
 800133e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001342:	6053      	str	r3, [r2, #4]
 8001344:	bd70      	pop	{r4, r5, r6, pc}
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001346:	2a2a      	cmp	r2, #42	; 0x2a
 8001348:	d1f7      	bne.n	800133a <I2C_DMAXferCplt+0x5c>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800134a:	2322      	movs	r3, #34	; 0x22
 800134c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800134e:	2328      	movs	r3, #40	; 0x28
 8001350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ffa0 	bl	800129a <HAL_I2C_SlaveRxCpltCallback>
 800135a:	e7ee      	b.n	800133a <I2C_DMAXferCplt+0x5c>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800135c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001360:	2a00      	cmp	r2, #0
 8001362:	d03c      	beq.n	80013de <I2C_DMAXferCplt+0x100>
    if (hi2c->XferCount == (uint16_t)1)
 8001364:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001366:	b292      	uxth	r2, r2
 8001368:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800136a:	bf02      	ittt	eq
 800136c:	681a      	ldreq	r2, [r3, #0]
 800136e:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
 8001372:	601a      	streq	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001374:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001376:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800137a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800137e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001380:	d006      	beq.n	8001390 <I2C_DMAXferCplt+0xb2>
 8001382:	2908      	cmp	r1, #8
 8001384:	d004      	beq.n	8001390 <I2C_DMAXferCplt+0xb2>
 8001386:	f1b1 4f2a 	cmp.w	r1, #2852126720	; 0xaa000000
 800138a:	d001      	beq.n	8001390 <I2C_DMAXferCplt+0xb2>
 800138c:	2920      	cmp	r1, #32
 800138e:	d103      	bne.n	8001398 <I2C_DMAXferCplt+0xba>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001396:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800139e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a6:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ae:	b11b      	cbz	r3, 80013b8 <I2C_DMAXferCplt+0xda>
      HAL_I2C_ErrorCallback(hi2c);
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ff75 	bl	80012a0 <HAL_I2C_ErrorCallback>
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 80013b8:	2220      	movs	r2, #32
 80013ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013be:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013c6:	2a40      	cmp	r2, #64	; 0x40
 80013c8:	d104      	bne.n	80013d4 <I2C_DMAXferCplt+0xf6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013ca:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80013cc:	4620      	mov	r0, r4
 80013ce:	f001 fb6e 	bl	8002aae <HAL_I2C_MemRxCpltCallback>
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80013d4:	2312      	movs	r3, #18
 80013d6:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff ff5c 	bl	8001296 <HAL_I2C_MasterRxCpltCallback>
 80013de:	bd70      	pop	{r4, r5, r6, pc}

080013e0 <HAL_I2C_AbortCpltCallback>:
{
 80013e0:	4770      	bx	lr

080013e2 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80013e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013e4:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80013e6:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 80013ea:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ec:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80013ee:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 80013f0:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 80013f2:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 80013f8:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80013fa:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013fc:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80013fe:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8001400:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001402:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001404:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001408:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800140a:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800140c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001410:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001412:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001414:	d108      	bne.n	8001428 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001416:	2220      	movs	r2, #32
 8001418:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800141c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001420:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001422:	f7ff ffdd 	bl	80013e0 <HAL_I2C_AbortCpltCallback>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001428:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800142c:	2928      	cmp	r1, #40	; 0x28
 800142e:	d10d      	bne.n	800144c <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8001430:	6814      	ldr	r4, [r2, #0]
 8001432:	f044 0401 	orr.w	r4, r4, #1
 8001436:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001438:	6814      	ldr	r4, [r2, #0]
 800143a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800143e:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001440:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001442:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8001446:	f7ff ff2b 	bl	80012a0 <HAL_I2C_ErrorCallback>
 800144a:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 800144c:	2220      	movs	r2, #32
 800144e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001452:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001456:	e7f6      	b.n	8001446 <I2C_DMAAbort+0x64>

08001458 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001458:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800145c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001460:	2b10      	cmp	r3, #16
{
 8001462:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001464:	b2d2      	uxtb	r2, r2
{
 8001466:	4604      	mov	r4, r0
 8001468:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800146a:	d105      	bne.n	8001478 <I2C_ITError+0x20>
 800146c:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800146e:	bf02      	ittt	eq
 8001470:	6819      	ldreq	r1, [r3, #0]
 8001472:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8001476:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001478:	f002 0128 	and.w	r1, r2, #40	; 0x28
 800147c:	2928      	cmp	r1, #40	; 0x28
 800147e:	d13a      	bne.n	80014f6 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001480:	2200      	movs	r2, #0
 8001482:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001484:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800148e:	d059      	beq.n	8001544 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001490:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001492:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001498:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800149a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800149e:	2b01      	cmp	r3, #1
 80014a0:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <I2C_ITError+0x13c>)
 80014a2:	d035      	beq.n	8001510 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80014a4:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80014a6:	f7ff f9bf 	bl	8000828 <HAL_DMA_Abort_IT>
 80014aa:	b150      	cbz	r0, 80014c2 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 80014ac:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80014ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80014b8:	2320      	movs	r3, #32
 80014ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80014be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014c0:	4798      	blx	r3
  CurrentState = hi2c->State;
 80014c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80014c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c8:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80014ca:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80014cc:	d512      	bpl.n	80014f4 <I2C_ITError+0x9c>
 80014ce:	2b28      	cmp	r3, #40	; 0x28
 80014d0:	d110      	bne.n	80014f4 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6853      	ldr	r3, [r2, #4]
 80014d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014da:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <I2C_ITError+0x140>)
 80014de:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80014e0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80014e6:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80014e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80014ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80014f0:	f7ff fed5 	bl	800129e <HAL_I2C_ListenCpltCallback>
 80014f4:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	0509      	lsls	r1, r1, #20
 80014fa:	d404      	bmi.n	8001506 <I2C_ITError+0xae>
 80014fc:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	bf1c      	itt	ne
 8001500:	2220      	movne	r2, #32
 8001502:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	2200      	movs	r2, #0
 8001508:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800150a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800150e:	e7bb      	b.n	8001488 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001510:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001512:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001514:	f7ff f988 	bl	8000828 <HAL_DMA_Abort_IT>
 8001518:	2800      	cmp	r0, #0
 800151a:	d0d2      	beq.n	80014c2 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	0652      	lsls	r2, r2, #25
 8001522:	d505      	bpl.n	8001530 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800152a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001530:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001532:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800153c:	2320      	movs	r3, #32
 800153e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001542:	e7bc      	b.n	80014be <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001544:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001548:	2960      	cmp	r1, #96	; 0x60
 800154a:	d115      	bne.n	8001578 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 800154c:	2120      	movs	r1, #32
 800154e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001552:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	0650      	lsls	r0, r2, #25
 8001558:	d505      	bpl.n	8001566 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800155a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001562:	3301      	adds	r3, #1
 8001564:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001566:	6822      	ldr	r2, [r4, #0]
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ff35 	bl	80013e0 <HAL_I2C_AbortCpltCallback>
 8001576:	e7a4      	b.n	80014c2 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	0651      	lsls	r1, r2, #25
 800157c:	d505      	bpl.n	800158a <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001586:	3301      	adds	r3, #1
 8001588:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fe88 	bl	80012a0 <HAL_I2C_ErrorCallback>
 8001590:	e797      	b.n	80014c2 <I2C_ITError+0x6a>
 8001592:	bf00      	nop
 8001594:	080013e3 	.word	0x080013e3
 8001598:	ffff0000 	.word	0xffff0000

0800159c <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800159c:	6803      	ldr	r3, [r0, #0]
{
 800159e:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80015a0:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80015a2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015a4:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 80015a8:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015aa:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015ac:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015b0:	2910      	cmp	r1, #16
{
 80015b2:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015b4:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015b6:	d002      	beq.n	80015be <HAL_I2C_EV_IRQHandler+0x22>
 80015b8:	2940      	cmp	r1, #64	; 0x40
 80015ba:	f040 82b6 	bne.w	8001b2a <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015be:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015c0:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015c2:	f011 0f01 	tst.w	r1, #1
 80015c6:	d107      	bne.n	80015d8 <HAL_I2C_EV_IRQHandler+0x3c>
 80015c8:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 80015cc:	d002      	beq.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 80015ce:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80015d2:	d152      	bne.n	800167a <HAL_I2C_EV_IRQHandler+0xde>
}
 80015d4:	b00d      	add	sp, #52	; 0x34
 80015d6:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d8:	0595      	lsls	r5, r2, #22
 80015da:	d54e      	bpl.n	800167a <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80015dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015de:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80015e2:	d10c      	bne.n	80015fe <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80015e4:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80015e6:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015e8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80015ec:	2a40      	cmp	r2, #64	; 0x40
 80015ee:	d111      	bne.n	8001614 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80015f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80015f2:	b952      	cbnz	r2, 800160a <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80015f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	e7ea      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80015fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001600:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001604:	d1f0      	bne.n	80015e8 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001606:	2208      	movs	r2, #8
 8001608:	e7ed      	b.n	80015e6 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800160a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	e7f2      	b.n	80015fa <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001614:	6922      	ldr	r2, [r4, #16]
 8001616:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800161a:	d11b      	bne.n	8001654 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800161c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001620:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001622:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001624:	d112      	bne.n	800164c <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001626:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800162a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800162c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800162e:	b912      	cbnz	r2, 8001636 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001630:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001632:	2900      	cmp	r1, #0
 8001634:	d0ce      	beq.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001636:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001638:	b91a      	cbnz	r2, 8001642 <HAL_I2C_EV_IRQHandler+0xa6>
 800163a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800163c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800163e:	2a00      	cmp	r2, #0
 8001640:	d0c8      	beq.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e7c3      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	e7ea      	b.n	800162a <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001654:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001656:	b932      	cbnz	r2, 8001666 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001658:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800165a:	11d2      	asrs	r2, r2, #7
 800165c:	f002 0206 	and.w	r2, r2, #6
 8001660:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001664:	e7c9      	b.n	80015fa <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001666:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001668:	2a01      	cmp	r2, #1
 800166a:	d1b3      	bne.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800166c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800166e:	11d2      	asrs	r2, r2, #7
 8001670:	f002 0206 	and.w	r2, r2, #6
 8001674:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001678:	e7bf      	b.n	80015fa <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800167a:	070d      	lsls	r5, r1, #28
 800167c:	d503      	bpl.n	8001686 <HAL_I2C_EV_IRQHandler+0xea>
 800167e:	0595      	lsls	r5, r2, #22
 8001680:	d501      	bpl.n	8001686 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001682:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001684:	e7e4      	b.n	8001650 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001686:	078d      	lsls	r5, r1, #30
 8001688:	f140 80e1 	bpl.w	800184e <HAL_I2C_EV_IRQHandler+0x2b2>
 800168c:	0595      	lsls	r5, r2, #22
 800168e:	f140 80de 	bpl.w	800184e <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001692:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001696:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001698:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800169a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800169e:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80016a0:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016a2:	f040 80cc 	bne.w	800183e <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80016a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80016a8:	b940      	cbnz	r0, 80016bc <HAL_I2C_EV_IRQHandler+0x120>
 80016aa:	2940      	cmp	r1, #64	; 0x40
 80016ac:	d106      	bne.n	80016bc <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ae:	9001      	str	r0, [sp, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	9201      	str	r2, [sp, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
 80016ba:	e78b      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80016bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80016be:	b981      	cbnz	r1, 80016e2 <HAL_I2C_EV_IRQHandler+0x146>
 80016c0:	6920      	ldr	r0, [r4, #16]
 80016c2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80016c6:	d10c      	bne.n	80016e2 <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c8:	9102      	str	r1, [sp, #8]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	9202      	str	r2, [sp, #8]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	9202      	str	r2, [sp, #8]
 80016d2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 80016dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016de:	3301      	adds	r3, #1
 80016e0:	e028      	b.n	8001734 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 80016e2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80016e4:	b289      	uxth	r1, r1
 80016e6:	b951      	cbnz	r1, 80016fe <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e8:	9103      	str	r1, [sp, #12]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	9203      	str	r2, [sp, #12]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	9203      	str	r2, [sp, #12]
 80016f2:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e019      	b.n	8001732 <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 80016fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001700:	b289      	uxth	r1, r1
 8001702:	2901      	cmp	r1, #1
 8001704:	d14a      	bne.n	800179c <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001706:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800170a:	d11c      	bne.n	8001746 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001712:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800171a:	d00d      	beq.n	8001738 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001722:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001724:	2200      	movs	r2, #0
 8001726:	9204      	str	r2, [sp, #16]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	9204      	str	r2, [sp, #16]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	9304      	str	r3, [sp, #16]
 8001730:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	6523      	str	r3, [r4, #80]	; 0x50
 8001736:	e74d      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001738:	9205      	str	r2, [sp, #20]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	9205      	str	r2, [sp, #20]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	9205      	str	r2, [sp, #20]
 8001742:	9a05      	ldr	r2, [sp, #20]
 8001744:	e7d6      	b.n	80016f4 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001746:	2a08      	cmp	r2, #8
 8001748:	d01c      	beq.n	8001784 <HAL_I2C_EV_IRQHandler+0x1e8>
 800174a:	2a20      	cmp	r2, #32
 800174c:	d01a      	beq.n	8001784 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800174e:	2d12      	cmp	r5, #18
 8001750:	d10d      	bne.n	800176e <HAL_I2C_EV_IRQHandler+0x1d2>
 8001752:	2a01      	cmp	r2, #1
 8001754:	d116      	bne.n	8001784 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800175c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800175e:	2200      	movs	r2, #0
 8001760:	9206      	str	r2, [sp, #24]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	9206      	str	r2, [sp, #24]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	9306      	str	r3, [sp, #24]
 800176a:	9b06      	ldr	r3, [sp, #24]
 800176c:	e7e1      	b.n	8001732 <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800176e:	2a10      	cmp	r2, #16
 8001770:	d8f1      	bhi.n	8001756 <HAL_I2C_EV_IRQHandler+0x1ba>
 8001772:	498e      	ldr	r1, [pc, #568]	; (80019ac <HAL_I2C_EV_IRQHandler+0x410>)
 8001774:	fa21 f202 	lsr.w	r2, r1, r2
 8001778:	07d0      	lsls	r0, r2, #31
 800177a:	d5ec      	bpl.n	8001756 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001782:	e7eb      	b.n	800175c <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178c:	2200      	movs	r2, #0
 800178e:	9207      	str	r2, [sp, #28]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	9207      	str	r2, [sp, #28]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	9207      	str	r2, [sp, #28]
 8001798:	9a07      	ldr	r2, [sp, #28]
 800179a:	e7ab      	b.n	80016f4 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 800179c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800179e:	b289      	uxth	r1, r1
 80017a0:	2902      	cmp	r1, #2
 80017a2:	d12c      	bne.n	80017fe <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80017a4:	2a10      	cmp	r2, #16
 80017a6:	d803      	bhi.n	80017b0 <HAL_I2C_EV_IRQHandler+0x214>
 80017a8:	4980      	ldr	r1, [pc, #512]	; (80019ac <HAL_I2C_EV_IRQHandler+0x410>)
 80017aa:	40d1      	lsrs	r1, r2
 80017ac:	07c9      	lsls	r1, r1, #31
 80017ae:	d422      	bmi.n	80017f6 <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80017b6:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017be:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	050d      	lsls	r5, r1, #20
 80017c4:	d50f      	bpl.n	80017e6 <HAL_I2C_EV_IRQHandler+0x24a>
 80017c6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017ca:	d008      	beq.n	80017de <HAL_I2C_EV_IRQHandler+0x242>
 80017cc:	1e51      	subs	r1, r2, #1
 80017ce:	291f      	cmp	r1, #31
 80017d0:	bf9d      	ittte	ls
 80017d2:	4a77      	ldrls	r2, [pc, #476]	; (80019b0 <HAL_I2C_EV_IRQHandler+0x414>)
 80017d4:	40ca      	lsrls	r2, r1
 80017d6:	43d2      	mvnls	r2, r2
 80017d8:	2201      	movhi	r2, #1
 80017da:	07d0      	lsls	r0, r2, #31
 80017dc:	d403      	bmi.n	80017e6 <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017e4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e6:	2200      	movs	r2, #0
 80017e8:	9208      	str	r2, [sp, #32]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	9208      	str	r2, [sp, #32]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	9308      	str	r3, [sp, #32]
 80017f2:	9b08      	ldr	r3, [sp, #32]
 80017f4:	e79d      	b.n	8001732 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80017fc:	e7df      	b.n	80017be <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001804:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	0509      	lsls	r1, r1, #20
 800180a:	d510      	bpl.n	800182e <HAL_I2C_EV_IRQHandler+0x292>
 800180c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001810:	d009      	beq.n	8001826 <HAL_I2C_EV_IRQHandler+0x28a>
 8001812:	3a01      	subs	r2, #1
 8001814:	2a1f      	cmp	r2, #31
 8001816:	bf9d      	ittte	ls
 8001818:	4965      	ldrls	r1, [pc, #404]	; (80019b0 <HAL_I2C_EV_IRQHandler+0x414>)
 800181a:	fa21 f202 	lsrls.w	r2, r1, r2
 800181e:	43d2      	mvnls	r2, r2
 8001820:	2201      	movhi	r2, #1
 8001822:	07d2      	lsls	r2, r2, #31
 8001824:	d403      	bmi.n	800182e <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800182c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2200      	movs	r2, #0
 8001830:	9209      	str	r2, [sp, #36]	; 0x24
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	9209      	str	r2, [sp, #36]	; 0x24
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	9309      	str	r3, [sp, #36]	; 0x24
 800183a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800183c:	e779      	b.n	8001732 <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183e:	2200      	movs	r2, #0
 8001840:	920a      	str	r2, [sp, #40]	; 0x28
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	920a      	str	r2, [sp, #40]	; 0x28
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	930a      	str	r3, [sp, #40]	; 0x28
 800184a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800184c:	e6c2      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800184e:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001852:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001854:	f000 80ae 	beq.w	80019b4 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001858:	0505      	lsls	r5, r0, #20
 800185a:	f53f aebb 	bmi.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800185e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001862:	f001 0104 	and.w	r1, r1, #4
 8001866:	d069      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0x3a0>
 8001868:	0550      	lsls	r0, r2, #21
 800186a:	d567      	bpl.n	800193c <HAL_I2C_EV_IRQHandler+0x3a0>
 800186c:	2900      	cmp	r1, #0
 800186e:	d165      	bne.n	800193c <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001870:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001874:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001876:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800187a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800187c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800187e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001880:	b9c5      	cbnz	r5, 80018b4 <HAL_I2C_EV_IRQHandler+0x318>
 8001882:	2a21      	cmp	r2, #33	; 0x21
 8001884:	d118      	bne.n	80018b8 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001886:	2808      	cmp	r0, #8
 8001888:	d078      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
 800188a:	2820      	cmp	r0, #32
 800188c:	d076      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
 800188e:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001892:	d073      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800189a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800189c:	2311      	movs	r3, #17
 800189e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	2320      	movs	r3, #32
 80018a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff fcf1 	bl	8001294 <HAL_I2C_MasterTxCpltCallback>
 80018b2:	e68f      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80018b4:	2a21      	cmp	r2, #33	; 0x21
 80018b6:	d005      	beq.n	80018c4 <HAL_I2C_EV_IRQHandler+0x328>
 80018b8:	2940      	cmp	r1, #64	; 0x40
 80018ba:	f47f ae8b 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80018be:	2a22      	cmp	r2, #34	; 0x22
 80018c0:	f47f ae88 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 80018c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018c6:	b292      	uxth	r2, r2
 80018c8:	b91a      	cbnz	r2, 80018d2 <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d0:	e6ba      	b.n	8001648 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018d2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80018d6:	2a40      	cmp	r2, #64	; 0x40
 80018d8:	d126      	bne.n	8001928 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 80018da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018dc:	b962      	cbnz	r2, 80018f8 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80018de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80018e0:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80018e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80018e4:	d104      	bne.n	80018f0 <HAL_I2C_EV_IRQHandler+0x354>
 80018e6:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80018e8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80018ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018ec:	3302      	adds	r3, #2
 80018ee:	e721      	b.n	8001734 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80018f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	e6f1      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 80018f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d102      	bne.n	8001904 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80018fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	e7f7      	b.n	80018f4 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8001904:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001906:	2a02      	cmp	r2, #2
 8001908:	f47f ae64 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800190c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001910:	2a22      	cmp	r2, #34	; 0x22
 8001912:	d104      	bne.n	800191e <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e65a      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800191e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001922:	2a21      	cmp	r2, #33	; 0x21
 8001924:	f47f ae56 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001928:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800192a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800192e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001930:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001932:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001934:	3b01      	subs	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	8563      	strh	r3, [r4, #42]	; 0x2a
 800193a:	e64b      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193c:	2900      	cmp	r1, #0
 800193e:	f43f ae49 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001942:	0592      	lsls	r2, r2, #22
 8001944:	f57f ae46 	bpl.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001948:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800194a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800194e:	2a21      	cmp	r2, #33	; 0x21
 8001950:	f47f ae40 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8001954:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001956:	b292      	uxth	r2, r2
 8001958:	2a00      	cmp	r2, #0
 800195a:	d1e5      	bne.n	8001928 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800195c:	2908      	cmp	r1, #8
 800195e:	d00d      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
 8001960:	2920      	cmp	r1, #32
 8001962:	d00b      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
 8001964:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001968:	d008      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001970:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001972:	2311      	movs	r3, #17
 8001974:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800197a:	e794      	b.n	80018a6 <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001982:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800198e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001990:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001996:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800199e:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 80019a0:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a2:	d184      	bne.n	80018ae <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80019a4:	f001 f882 	bl	8002aac <HAL_I2C_MemTxCpltCallback>
 80019a8:	e614      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 80019aa:	bf00      	nop
 80019ac:	00010014 	.word	0x00010014
 80019b0:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019b4:	0505      	lsls	r5, r0, #20
 80019b6:	f53f ae0d 	bmi.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ba:	f011 0f40 	tst.w	r1, #64	; 0x40
 80019be:	f001 0104 	and.w	r1, r1, #4
 80019c2:	d048      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x4ba>
 80019c4:	0550      	lsls	r0, r2, #21
 80019c6:	d546      	bpl.n	8001a56 <HAL_I2C_EV_IRQHandler+0x4ba>
 80019c8:	2900      	cmp	r1, #0
 80019ca:	d144      	bne.n	8001a56 <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80019d0:	2a22      	cmp	r2, #34	; 0x22
 80019d2:	f47f adff 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 80019d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019d8:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80019da:	2a03      	cmp	r2, #3
 80019dc:	d914      	bls.n	8001a08 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80019e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80019f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	f47f adec 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019fc:	6822      	ldr	r2, [r4, #0]
 80019fe:	6853      	ldr	r3, [r2, #4]
 8001a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a04:	6053      	str	r3, [r2, #4]
 8001a06:	e5e5      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001a08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	f43f ade2 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	f63f addf 	bhi.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a24:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a2e:	3301      	adds	r3, #1
 8001a30:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a40:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a48:	2b40      	cmp	r3, #64	; 0x40
 8001a4a:	d168      	bne.n	8001b1e <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a4c:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f001 f82d 	bl	8002aae <HAL_I2C_MemRxCpltCallback>
 8001a54:	e5be      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	2900      	cmp	r1, #0
 8001a58:	f43f adbc 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001a5c:	0592      	lsls	r2, r2, #22
 8001a5e:	f57f adb9 	bpl.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001a64:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001a66:	b289      	uxth	r1, r1
 8001a68:	2904      	cmp	r1, #4
 8001a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a6c:	d109      	bne.n	8001a82 <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a74:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	6263      	str	r3, [r4, #36]	; 0x24
 8001a80:	e757      	b.n	8001932 <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 8001a82:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001a84:	b280      	uxth	r0, r0
 8001a86:	2803      	cmp	r0, #3
 8001a88:	d10c      	bne.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a8a:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001a8c:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a8e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8001a92:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001a94:	d0ef      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0x4da>
 8001a96:	2a02      	cmp	r2, #2
 8001a98:	d0ed      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e7e8      	b.n	8001a76 <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 8001aa4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001aa6:	b280      	uxth	r0, r0
 8001aa8:	2802      	cmp	r0, #2
 8001aaa:	d1e4      	bne.n	8001a76 <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_EV_IRQHandler+0x518>
 8001ab0:	2a10      	cmp	r2, #16
 8001ab2:	d128      	bne.n	8001b06 <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001ac0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ac2:	1c53      	adds	r3, r2, #1
 8001ac4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001ac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8001ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ad6:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8001ad8:	3301      	adds	r3, #1
 8001ada:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001adc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ae4:	6853      	ldr	r3, [r2, #4]
 8001ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aea:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	2320      	movs	r3, #32
 8001aee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001af2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b00:	d10d      	bne.n	8001b1e <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b02:	6323      	str	r3, [r4, #48]	; 0x30
 8001b04:	e7a3      	b.n	8001a4e <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_EV_IRQHandler+0x572>
 8001b0a:	2a02      	cmp	r2, #2
 8001b0c:	d103      	bne.n	8001b16 <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b14:	e7d1      	b.n	8001aba <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1c:	e7cd      	b.n	8001aba <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fbb7 	bl	8001296 <HAL_I2C_MasterRxCpltCallback>
 8001b28:	e554      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b2c:	b321      	cbz	r1, 8001b78 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b2e:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001b30:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b32:	f011 0f02 	tst.w	r1, #2
 8001b36:	d029      	beq.n	8001b8c <HAL_I2C_EV_IRQHandler+0x5f0>
 8001b38:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001b3c:	d026      	beq.n	8001b8c <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b40:	b102      	cbz	r2, 8001b44 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b42:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b44:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001b48:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001b4c:	2a28      	cmp	r2, #40	; 0x28
 8001b4e:	d116      	bne.n	8001b7e <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b56:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001b58:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001b5c:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8001b5e:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001b62:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001b66:	bf54      	ite	pl
 8001b68:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001b6a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001b6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff fb93 	bl	800129c <HAL_I2C_AddrCallback>
 8001b76:	e52d      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b78:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b7a:	6959      	ldr	r1, [r3, #20]
 8001b7c:	e7d9      	b.n	8001b32 <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b7e:	f06f 0202 	mvn.w	r2, #2
 8001b82:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001b84:	2300      	movs	r3, #0
 8001b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b8a:	e523      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b8c:	06cd      	lsls	r5, r1, #27
 8001b8e:	f140 80af 	bpl.w	8001cf0 <HAL_I2C_EV_IRQHandler+0x754>
 8001b92:	0595      	lsls	r5, r2, #22
 8001b94:	f140 80ac 	bpl.w	8001cf0 <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b98:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba2:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	920b      	str	r2, [sp, #44]	; 0x2c
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	920b      	str	r2, [sp, #44]	; 0x2c
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bbc:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc2:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bc4:	d520      	bpl.n	8001c08 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bc6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001bca:	2a22      	cmp	r2, #34	; 0x22
 8001bcc:	d148      	bne.n	8001c60 <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001bce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	6852      	ldr	r2, [r2, #4]
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001bd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	b11a      	cbz	r2, 8001be6 <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001be0:	f042 0204 	orr.w	r2, r2, #4
 8001be4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bec:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001bee:	f7fe fee7 	bl	80009c0 <HAL_DMA_GetState>
 8001bf2:	2801      	cmp	r0, #1
 8001bf4:	d008      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001bf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_I2C_EV_IRQHandler+0x840>)
 8001bfa:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bfc:	f7fe fe14 	bl	8000828 <HAL_DMA_Abort_IT>
 8001c00:	b110      	cbz	r0, 8001c08 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c06:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b313      	cbz	r3, 8001c54 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	0752      	lsls	r2, r2, #29
 8001c14:	d509      	bpl.n	8001c2a <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c1e:	3301      	adds	r3, #1
 8001c20:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	0650      	lsls	r0, r2, #25
 8001c30:	d509      	bpl.n	8001c46 <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8001c46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b11b      	cbz	r3, 8001c54 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c56:	b303      	cbz	r3, 8001c9a <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff fbfd 	bl	8001458 <I2C_ITError>
 8001c5e:	e4b9      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001c60:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c62:	6802      	ldr	r2, [r0, #0]
 8001c64:	6852      	ldr	r2, [r2, #4]
 8001c66:	b292      	uxth	r2, r2
 8001c68:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001c6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	b11a      	cbz	r2, 8001c78 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c72:	f042 0204 	orr.w	r2, r2, #4
 8001c76:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c80:	f7fe fe9e 	bl	80009c0 <HAL_DMA_GetState>
 8001c84:	2801      	cmp	r0, #1
 8001c86:	d0bf      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_I2C_EV_IRQHandler+0x840>)
 8001c8c:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001c8e:	f7fe fdcb 	bl	8000828 <HAL_DMA_Abort_IT>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d0b8      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c98:	e7b4      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c9a:	2d2a      	cmp	r5, #42	; 0x2a
 8001c9c:	d106      	bne.n	8001cac <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ca0:	2328      	movs	r3, #40	; 0x28
 8001ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff faf7 	bl	800129a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cb0:	2b28      	cmp	r3, #40	; 0x28
 8001cb2:	d10c      	bne.n	8001cce <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_I2C_EV_IRQHandler+0x844>)
 8001cb6:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001cbe:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001cc8:	f7ff fae9 	bl	800129e <HAL_I2C_ListenCpltCallback>
 8001ccc:	e482      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cd0:	2b22      	cmp	r3, #34	; 0x22
 8001cd2:	d002      	beq.n	8001cda <HAL_I2C_EV_IRQHandler+0x73e>
 8001cd4:	2d22      	cmp	r5, #34	; 0x22
 8001cd6:	f47f ac7d 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff fad6 	bl	800129a <HAL_I2C_SlaveRxCpltCallback>
 8001cee:	e471      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001cf0:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8001cf4:	2821      	cmp	r0, #33	; 0x21
 8001cf6:	f001 0504 	and.w	r5, r1, #4
 8001cfa:	d135      	bne.n	8001d68 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cfc:	0609      	lsls	r1, r1, #24
 8001cfe:	d527      	bpl.n	8001d50 <HAL_I2C_EV_IRQHandler+0x7b4>
 8001d00:	0551      	lsls	r1, r2, #21
 8001d02:	d525      	bpl.n	8001d50 <HAL_I2C_EV_IRQHandler+0x7b4>
 8001d04:	bb25      	cbnz	r5, 8001d50 <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d06:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001d0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d0c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d0e:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	f43f ac5f 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d18:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001d1c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8001d1e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001d20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d22:	3a01      	subs	r2, #1
 8001d24:	b292      	uxth	r2, r2
 8001d26:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	2a00      	cmp	r2, #0
 8001d2e:	f47f ac51 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001d32:	2929      	cmp	r1, #41	; 0x29
 8001d34:	f47f ac4e 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3e:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d40:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d42:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff faa5 	bl	8001298 <HAL_I2C_SlaveTxCpltCallback>
 8001d4e:	e441      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	f43f ac3f 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001d56:	0595      	lsls	r5, r2, #22
 8001d58:	f57f ac3c 	bpl.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001d5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	f47f ade1 	bne.w	8001928 <HAL_I2C_EV_IRQHandler+0x38c>
 8001d66:	e435      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d68:	0648      	lsls	r0, r1, #25
 8001d6a:	d527      	bpl.n	8001dbc <HAL_I2C_EV_IRQHandler+0x820>
 8001d6c:	0551      	lsls	r1, r2, #21
 8001d6e:	d525      	bpl.n	8001dbc <HAL_I2C_EV_IRQHandler+0x820>
 8001d70:	bb25      	cbnz	r5, 8001dbc <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d72:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001d76:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d78:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d7a:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	f43f ac29 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001d8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f47f ac1a 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001da0:	2a2a      	cmp	r2, #42	; 0x2a
 8001da2:	f47f ac17 	bne.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	6853      	ldr	r3, [r2, #4]
 8001daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dae:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001db0:	2322      	movs	r3, #34	; 0x22
 8001db2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001db4:	2328      	movs	r3, #40	; 0x28
 8001db6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001dba:	e795      	b.n	8001ce8 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dbc:	2d00      	cmp	r5, #0
 8001dbe:	f43f ac09 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
 8001dc2:	0592      	lsls	r2, r2, #22
 8001dc4:	f57f ac06 	bpl.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001dc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	f43f ac01 	beq.w	80015d4 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	7013      	strb	r3, [r2, #0]
 8001dd8:	e64f      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x4de>
 8001dda:	bf00      	nop
 8001ddc:	080013e3 	.word	0x080013e3
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <HAL_I2C_ER_IRQHandler>:
{
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001de6:	6803      	ldr	r3, [r0, #0]
 8001de8:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001dea:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001dec:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 8001df0:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001df2:	d006      	beq.n	8001e02 <HAL_I2C_ER_IRQHandler+0x1e>
 8001df4:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df8:	bf1e      	ittt	ne
 8001dfa:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 8001dfe:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8001e00:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e02:	05b9      	lsls	r1, r7, #22
 8001e04:	d506      	bpl.n	8001e14 <HAL_I2C_ER_IRQHandler+0x30>
 8001e06:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e08:	bf42      	ittt	mi
 8001e0a:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8001e0e:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e12:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e14:	0578      	lsls	r0, r7, #21
 8001e16:	d537      	bpl.n	8001e88 <HAL_I2C_ER_IRQHandler+0xa4>
 8001e18:	05f1      	lsls	r1, r6, #23
 8001e1a:	d535      	bpl.n	8001e88 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8001e1c:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8001e20:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8001e22:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8001e26:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e28:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8001e2c:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8001e2e:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e30:	d15a      	bne.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x104>
 8001e32:	2900      	cmp	r1, #0
 8001e34:	d158      	bne.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x104>
 8001e36:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8001e3a:	2921      	cmp	r1, #33	; 0x21
 8001e3c:	d003      	beq.n	8001e46 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001e3e:	2a28      	cmp	r2, #40	; 0x28
 8001e40:	d152      	bne.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001e42:	2821      	cmp	r0, #33	; 0x21
 8001e44:	d150      	bne.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e46:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001e4c:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e4e:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_ER_IRQHandler+0x72>
 8001e52:	2920      	cmp	r1, #32
 8001e54:	d12a      	bne.n	8001eac <HAL_I2C_ER_IRQHandler+0xc8>
 8001e56:	2a28      	cmp	r2, #40	; 0x28
 8001e58:	d128      	bne.n	8001eac <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <HAL_I2C_ER_IRQHandler+0x128>)
 8001e5c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e64:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e72:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e74:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e76:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e78:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e7a:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e84:	f7ff fa0b 	bl	800129e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e88:	053a      	lsls	r2, r7, #20
 8001e8a:	d53c      	bpl.n	8001f06 <HAL_I2C_ER_IRQHandler+0x122>
 8001e8c:	05f3      	lsls	r3, r6, #23
 8001e8e:	d53a      	bpl.n	8001f06 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8001e96:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e9a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8001e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e9e:	431d      	orrs	r5, r3
 8001ea0:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ea2:	4620      	mov	r0, r4
}
 8001ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8001ea8:	f7ff bad6 	b.w	8001458 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001eac:	2a21      	cmp	r2, #33	; 0x21
 8001eae:	d117      	bne.n	8001ee0 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_I2C_ER_IRQHandler+0x128>)
 8001eb2:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001eb4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ece:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff f9dd 	bl	8001298 <HAL_I2C_SlaveTxCpltCallback>
 8001ede:	e7d3      	b.n	8001e88 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	e7cf      	b.n	8001e88 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eec:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001eee:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001ef2:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	bf04      	itt	eq
 8001ef6:	681a      	ldreq	r2, [r3, #0]
 8001ef8:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8001efc:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	bf08      	it	eq
 8001f02:	601a      	streq	r2, [r3, #0]
 8001f04:	e7c0      	b.n	8001e88 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8001f06:	2d00      	cmp	r5, #0
 8001f08:	d1c8      	bne.n	8001e9c <HAL_I2C_ER_IRQHandler+0xb8>
 8001f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	4604      	mov	r4, r0
 8001f16:	b918      	cbnz	r0, 8001f20 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001f1a:	b002      	add	sp, #8
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	07dd      	lsls	r5, r3, #31
 8001f24:	d410      	bmi.n	8001f48 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	0798      	lsls	r0, r3, #30
 8001f2a:	d458      	bmi.n	8001fde <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	071a      	lsls	r2, r3, #28
 8001f30:	f100 809a 	bmi.w	8002068 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	075b      	lsls	r3, r3, #29
 8001f38:	f100 80b8 	bmi.w	80020ac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	69a2      	ldr	r2, [r4, #24]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	f040 8119 	bne.w	8002176 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e7e8      	b.n	8001f1a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f48:	4ba6      	ldr	r3, [pc, #664]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	f002 020c 	and.w	r2, r2, #12
 8001f50:	2a04      	cmp	r2, #4
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5a:	2a08      	cmp	r2, #8
 8001f5c:	d10a      	bne.n	8001f74 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0259      	lsls	r1, r3, #9
 8001f62:	d507      	bpl.n	8001f74 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b9f      	ldr	r3, [pc, #636]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	039a      	lsls	r2, r3, #14
 8001f6a:	d5dc      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x16>
 8001f6c:	6863      	ldr	r3, [r4, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1d9      	bne.n	8001f26 <HAL_RCC_OscConfig+0x16>
 8001f72:	e7d1      	b.n	8001f18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f74:	6863      	ldr	r3, [r4, #4]
 8001f76:	4d9b      	ldr	r5, [pc, #620]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d111      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x92>
 8001f7e:	682b      	ldr	r3, [r5, #0]
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f86:	f7fe faf9 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4d96      	ldr	r5, [pc, #600]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001f8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	d4c8      	bmi.n	8001f26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe faf2 	bl	800057c <HAL_GetTick>
 8001f98:	1b80      	subs	r0, r0, r6
 8001f9a:	2864      	cmp	r0, #100	; 0x64
 8001f9c:	d9f7      	bls.n	8001f8e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	e7bb      	b.n	8001f1a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa6:	d104      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xa2>
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	e7e5      	b.n	8001f7e <HAL_RCC_OscConfig+0x6e>
 8001fb2:	682a      	ldr	r2, [r5, #0]
 8001fb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fb8:	602a      	str	r2, [r5, #0]
 8001fba:	682a      	ldr	r2, [r5, #0]
 8001fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1df      	bne.n	8001f86 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fad9 	bl	800057c <HAL_GetTick>
 8001fca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	039f      	lsls	r7, r3, #14
 8001fd0:	d5a9      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fad3 	bl	800057c <HAL_GetTick>
 8001fd6:	1b80      	subs	r0, r0, r6
 8001fd8:	2864      	cmp	r0, #100	; 0x64
 8001fda:	d9f7      	bls.n	8001fcc <HAL_RCC_OscConfig+0xbc>
 8001fdc:	e7df      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	f012 0f0c 	tst.w	r2, #12
 8001fe6:	d007      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fee:	2a08      	cmp	r2, #8
 8001ff0:	d111      	bne.n	8002016 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	025e      	lsls	r6, r3, #9
 8001ff6:	d40e      	bmi.n	8002016 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	0795      	lsls	r5, r2, #30
 8001ffe:	d502      	bpl.n	8002006 <HAL_RCC_OscConfig+0xf6>
 8002000:	68e2      	ldr	r2, [r4, #12]
 8002002:	2a01      	cmp	r2, #1
 8002004:	d188      	bne.n	8001f18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6921      	ldr	r1, [r4, #16]
 800200a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800200e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002012:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002014:	e78a      	b.n	8001f2c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002016:	68e2      	ldr	r2, [r4, #12]
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x2d8>)
 800201a:	b1b2      	cbz	r2, 800204a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002020:	f7fe faac 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4d6f      	ldr	r5, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002026:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	0798      	lsls	r0, r3, #30
 800202c:	d507      	bpl.n	800203e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	6922      	ldr	r2, [r4, #16]
 8002032:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002036:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800203a:	602b      	str	r3, [r5, #0]
 800203c:	e776      	b.n	8001f2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe fa9d 	bl	800057c <HAL_GetTick>
 8002042:	1b80      	subs	r0, r0, r6
 8002044:	2802      	cmp	r0, #2
 8002046:	d9ef      	bls.n	8002028 <HAL_RCC_OscConfig+0x118>
 8002048:	e7a9      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800204a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800204c:	f7fe fa96 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002050:	4d64      	ldr	r5, [pc, #400]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002052:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	0799      	lsls	r1, r3, #30
 8002058:	f57f af68 	bpl.w	8001f2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe fa8e 	bl	800057c <HAL_GetTick>
 8002060:	1b80      	subs	r0, r0, r6
 8002062:	2802      	cmp	r0, #2
 8002064:	d9f6      	bls.n	8002054 <HAL_RCC_OscConfig+0x144>
 8002066:	e79a      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002068:	6962      	ldr	r2, [r4, #20]
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <HAL_RCC_OscConfig+0x2dc>)
 800206c:	b17a      	cbz	r2, 800208e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002072:	f7fe fa83 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4d5b      	ldr	r5, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002078:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800207c:	079f      	lsls	r7, r3, #30
 800207e:	f53f af59 	bmi.w	8001f34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe fa7b 	bl	800057c <HAL_GetTick>
 8002086:	1b80      	subs	r0, r0, r6
 8002088:	2802      	cmp	r0, #2
 800208a:	d9f6      	bls.n	800207a <HAL_RCC_OscConfig+0x16a>
 800208c:	e787      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800208e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002090:	f7fe fa74 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4d53      	ldr	r5, [pc, #332]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002096:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800209a:	0798      	lsls	r0, r3, #30
 800209c:	f57f af4a 	bpl.w	8001f34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe fa6c 	bl	800057c <HAL_GetTick>
 80020a4:	1b80      	subs	r0, r0, r6
 80020a6:	2802      	cmp	r0, #2
 80020a8:	d9f6      	bls.n	8002098 <HAL_RCC_OscConfig+0x188>
 80020aa:	e778      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 80020ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80020b4:	d128      	bne.n	8002108 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	9201      	str	r2, [sp, #4]
 80020b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4d48      	ldr	r5, [pc, #288]	; (80021f0 <HAL_RCC_OscConfig+0x2e0>)
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	05d9      	lsls	r1, r3, #23
 80020d2:	d51b      	bpl.n	800210c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	68a3      	ldr	r3, [r4, #8]
 80020d6:	4d43      	ldr	r5, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d127      	bne.n	800212c <HAL_RCC_OscConfig+0x21c>
 80020dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020e4:	f7fe fa4a 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e8:	4d3e      	ldr	r5, [pc, #248]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80020ea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020f2:	079b      	lsls	r3, r3, #30
 80020f4:	d539      	bpl.n	800216a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80020f6:	2e00      	cmp	r6, #0
 80020f8:	f43f af20 	beq.w	8001f3c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4a39      	ldr	r2, [pc, #228]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 80020fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	e719      	b.n	8001f3c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002108:	2600      	movs	r6, #0
 800210a:	e7df      	b.n	80020cc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002114:	f7fe fa32 	bl	800057c <HAL_GetTick>
 8002118:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	05da      	lsls	r2, r3, #23
 800211e:	d4d9      	bmi.n	80020d4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fa2c 	bl	800057c <HAL_GetTick>
 8002124:	1bc0      	subs	r0, r0, r7
 8002126:	2802      	cmp	r0, #2
 8002128:	d9f7      	bls.n	800211a <HAL_RCC_OscConfig+0x20a>
 800212a:	e738      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	2b05      	cmp	r3, #5
 800212e:	d104      	bne.n	800213a <HAL_RCC_OscConfig+0x22a>
 8002130:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	672b      	str	r3, [r5, #112]	; 0x70
 8002138:	e7d0      	b.n	80020dc <HAL_RCC_OscConfig+0x1cc>
 800213a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	672a      	str	r2, [r5, #112]	; 0x70
 8002142:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002144:	f022 0204 	bic.w	r2, r2, #4
 8002148:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ca      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800214e:	f7fe fa15 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002156:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800215a:	0798      	lsls	r0, r3, #30
 800215c:	d5cb      	bpl.n	80020f6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fa0d 	bl	800057c <HAL_GetTick>
 8002162:	1bc0      	subs	r0, r0, r7
 8002164:	4540      	cmp	r0, r8
 8002166:	d9f7      	bls.n	8002158 <HAL_RCC_OscConfig+0x248>
 8002168:	e719      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe fa07 	bl	800057c <HAL_GetTick>
 800216e:	1bc0      	subs	r0, r0, r7
 8002170:	4540      	cmp	r0, r8
 8002172:	d9bd      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1e0>
 8002174:	e713      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002176:	4d1b      	ldr	r5, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
 8002178:	68ab      	ldr	r3, [r5, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	f43f aeca 	beq.w	8001f18 <HAL_RCC_OscConfig+0x8>
 8002184:	4e1b      	ldr	r6, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x2e4>)
 8002186:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800218a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218c:	d134      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800218e:	f7fe f9f5 	bl	800057c <HAL_GetTick>
 8002192:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	0199      	lsls	r1, r3, #6
 8002198:	d41e      	bmi.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219a:	6a22      	ldr	r2, [r4, #32]
 800219c:	69e3      	ldr	r3, [r4, #28]
 800219e:	4313      	orrs	r3, r2
 80021a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4c0d      	ldr	r4, [pc, #52]	; (80021e4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b0:	0852      	lsrs	r2, r2, #1
 80021b2:	3a01      	subs	r2, #1
 80021b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021b8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80021ba:	2301      	movs	r3, #1
 80021bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80021be:	f7fe f9dd 	bl	800057c <HAL_GetTick>
 80021c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	019a      	lsls	r2, r3, #6
 80021c8:	f53f aebc 	bmi.w	8001f44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe f9d6 	bl	800057c <HAL_GetTick>
 80021d0:	1b40      	subs	r0, r0, r5
 80021d2:	2802      	cmp	r0, #2
 80021d4:	d9f6      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2b4>
 80021d6:	e6e2      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe f9d0 	bl	800057c <HAL_GetTick>
 80021dc:	1bc0      	subs	r0, r0, r7
 80021de:	2802      	cmp	r0, #2
 80021e0:	d9d8      	bls.n	8002194 <HAL_RCC_OscConfig+0x284>
 80021e2:	e6dc      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80021f8:	f7fe f9c0 	bl	800057c <HAL_GetTick>
 80021fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	682b      	ldr	r3, [r5, #0]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	f57f ae9f 	bpl.w	8001f44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe f9b9 	bl	800057c <HAL_GetTick>
 800220a:	1b00      	subs	r0, r0, r4
 800220c:	2802      	cmp	r0, #2
 800220e:	d9f6      	bls.n	80021fe <HAL_RCC_OscConfig+0x2ee>
 8002210:	e6c5      	b.n	8001f9e <HAL_RCC_OscConfig+0x8e>
 8002212:	bf00      	nop

08002214 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002214:	4913      	ldr	r1, [pc, #76]	; (8002264 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002216:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	688b      	ldr	r3, [r1, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x16>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002226:	4810      	ldr	r0, [pc, #64]	; (8002268 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002228:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800222a:	4810      	ldr	r0, [pc, #64]	; (800226c <HAL_RCC_GetSysClockFreq+0x58>)
 800222c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002230:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002234:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002238:	bf14      	ite	ne
 800223a:	480c      	ldrne	r0, [pc, #48]	; (800226c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	480a      	ldreq	r0, [pc, #40]	; (8002268 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002242:	bf18      	it	ne
 8002244:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002246:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	fba1 0100 	umull	r0, r1, r1, r0
 800224e:	f7fd ffc3 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_RCC_GetSysClockFreq+0x50>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800225e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002262:	bd08      	pop	{r3, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <HAL_RCC_ClockConfig>:
{
 8002270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002274:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002276:	4604      	mov	r4, r0
 8002278:	b910      	cbnz	r0, 8002280 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800227a:	2001      	movs	r0, #1
 800227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_RCC_ClockConfig+0x124>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f002 020f 	and.w	r2, r2, #15
 8002288:	428a      	cmp	r2, r1
 800228a:	d328      	bcc.n	80022de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	6821      	ldr	r1, [r4, #0]
 800228e:	078f      	lsls	r7, r1, #30
 8002290:	d42d      	bmi.n	80022ee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	07c8      	lsls	r0, r1, #31
 8002294:	d440      	bmi.n	8002318 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x124>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f002 020f 	and.w	r2, r2, #15
 800229e:	4295      	cmp	r5, r2
 80022a0:	d366      	bcc.n	8002370 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	0751      	lsls	r1, r2, #29
 80022a6:	d46c      	bmi.n	8002382 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	0713      	lsls	r3, r2, #28
 80022aa:	d507      	bpl.n	80022bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ac:	4a3a      	ldr	r2, [pc, #232]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
 80022ae:	6921      	ldr	r1, [r4, #16]
 80022b0:	6893      	ldr	r3, [r2, #8]
 80022b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022bc:	f7ff ffaa 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
 80022c2:	4a36      	ldr	r2, [pc, #216]	; (800239c <HAL_RCC_ClockConfig+0x12c>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	40d8      	lsrs	r0, r3
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x130>)
 80022d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe f908 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
 80022da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d1c6      	bne.n	800227a <HAL_RCC_ClockConfig+0xa>
 80022ec:	e7ce      	b.n	800228c <HAL_RCC_ClockConfig+0x1c>
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	bf1e      	ittt	ne
 80022f6:	689a      	ldrne	r2, [r3, #8]
 80022f8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80022fc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	bf42      	ittt	mi
 8002302:	689a      	ldrmi	r2, [r3, #8]
 8002304:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002308:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	68a0      	ldr	r0, [r4, #8]
 800230e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002312:	4302      	orrs	r2, r0
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e7bc      	b.n	8002292 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002318:	6862      	ldr	r2, [r4, #4]
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
 800231c:	2a01      	cmp	r2, #1
 800231e:	d11d      	bne.n	800235c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	d0a8      	beq.n	800227a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002328:	4e1b      	ldr	r6, [pc, #108]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
 800232a:	68b3      	ldr	r3, [r6, #8]
 800232c:	f023 0303 	bic.w	r3, r3, #3
 8002330:	4313      	orrs	r3, r2
 8002332:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002334:	f7fe f922 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800233c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	68b3      	ldr	r3, [r6, #8]
 8002340:	6862      	ldr	r2, [r4, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800234a:	d0a4      	beq.n	8002296 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe f916 	bl	800057c <HAL_GetTick>
 8002350:	1bc0      	subs	r0, r0, r7
 8002352:	4540      	cmp	r0, r8
 8002354:	d9f3      	bls.n	800233e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
}
 8002358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235c:	1e91      	subs	r1, r2, #2
 800235e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	d802      	bhi.n	800236a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002368:	e7dd      	b.n	8002326 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	f013 0f02 	tst.w	r3, #2
 800236e:	e7da      	b.n	8002326 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002370:	b2ea      	uxtb	r2, r5
 8002372:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	429d      	cmp	r5, r3
 800237c:	f47f af7d 	bne.w	800227a <HAL_RCC_ClockConfig+0xa>
 8002380:	e78f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002382:	4905      	ldr	r1, [pc, #20]	; (8002398 <HAL_RCC_ClockConfig+0x128>)
 8002384:	68e0      	ldr	r0, [r4, #12]
 8002386:	688b      	ldr	r3, [r1, #8]
 8002388:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800238c:	4303      	orrs	r3, r0
 800238e:	608b      	str	r3, [r1, #8]
 8002390:	e78a      	b.n	80022a8 <HAL_RCC_ClockConfig+0x38>
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00
 8002398:	40023800 	.word	0x40023800
 800239c:	080031f5 	.word	0x080031f5
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023b2:	6810      	ldr	r0, [r2, #0]
}
 80023b4:	40d8      	lsrs	r0, r3
 80023b6:	4770      	bx	lr
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08003205 	.word	0x08003205
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023d2:	6810      	ldr	r0, [r2, #0]
}
 80023d4:	40d8      	lsrs	r0, r3
 80023d6:	4770      	bx	lr
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08003205 	.word	0x08003205
 80023e0:	20000008 	.word	0x20000008

080023e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e8:	6806      	ldr	r6, [r0, #0]
 80023ea:	68c2      	ldr	r2, [r0, #12]
 80023ec:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ee:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f4:	4313      	orrs	r3, r2
 80023f6:	6133      	str	r3, [r6, #16]
{
 80023f8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023fa:	6883      	ldr	r3, [r0, #8]
 80023fc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80023fe:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002400:	4303      	orrs	r3, r0
 8002402:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002404:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002408:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800240a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800240e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002410:	4313      	orrs	r3, r2
 8002412:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002414:	6973      	ldr	r3, [r6, #20]
 8002416:	69a2      	ldr	r2, [r4, #24]
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002422:	6173      	str	r3, [r6, #20]
 8002424:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002426:	d17c      	bne.n	8002522 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002428:	429e      	cmp	r6, r3
 800242a:	d003      	beq.n	8002434 <UART_SetConfig+0x50>
 800242c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002430:	429e      	cmp	r6, r3
 8002432:	d144      	bne.n	80024be <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002434:	f7ff ffc6 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002438:	2519      	movs	r5, #25
 800243a:	fb05 f300 	mul.w	r3, r5, r0
 800243e:	6860      	ldr	r0, [r4, #4]
 8002440:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002444:	0040      	lsls	r0, r0, #1
 8002446:	fbb3 f3f0 	udiv	r3, r3, r0
 800244a:	fbb3 f3f9 	udiv	r3, r3, r9
 800244e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002452:	f7ff ffb7 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002456:	6863      	ldr	r3, [r4, #4]
 8002458:	4368      	muls	r0, r5
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002460:	f7ff ffb0 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	4368      	muls	r0, r5
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fbb0 f3f3 	udiv	r3, r0, r3
 800246e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002472:	fb09 7313 	mls	r3, r9, r3, r7
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3332      	adds	r3, #50	; 0x32
 800247a:	fbb3 f3f9 	udiv	r3, r3, r9
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002484:	f7ff ff9e 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002488:	6862      	ldr	r2, [r4, #4]
 800248a:	4368      	muls	r0, r5
 800248c:	0052      	lsls	r2, r2, #1
 800248e:	fbb0 faf2 	udiv	sl, r0, r2
 8002492:	f7ff ff97 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	4368      	muls	r0, r5
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80024a4:	fb09 a313 	mls	r3, r9, r3, sl
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	3332      	adds	r3, #50	; 0x32
 80024ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024b6:	443b      	add	r3, r7
 80024b8:	60b3      	str	r3, [r6, #8]
 80024ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024be:	f7ff ff71 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80024c2:	2519      	movs	r5, #25
 80024c4:	fb05 f300 	mul.w	r3, r5, r0
 80024c8:	6860      	ldr	r0, [r4, #4]
 80024ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024ce:	0040      	lsls	r0, r0, #1
 80024d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80024d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80024d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024dc:	f7ff ff62 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80024e0:	6863      	ldr	r3, [r4, #4]
 80024e2:	4368      	muls	r0, r5
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fbb0 f7f3 	udiv	r7, r0, r3
 80024ea:	f7ff ff5b 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80024ee:	6863      	ldr	r3, [r4, #4]
 80024f0:	4368      	muls	r0, r5
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80024fc:	fb09 7313 	mls	r3, r9, r3, r7
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	fbb3 f3f9 	udiv	r3, r3, r9
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800250e:	f7ff ff49 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002512:	6862      	ldr	r2, [r4, #4]
 8002514:	4368      	muls	r0, r5
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	fbb0 faf2 	udiv	sl, r0, r2
 800251c:	f7ff ff42 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002520:	e7b9      	b.n	8002496 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002522:	429e      	cmp	r6, r3
 8002524:	d002      	beq.n	800252c <UART_SetConfig+0x148>
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <UART_SetConfig+0x230>)
 8002528:	429e      	cmp	r6, r3
 800252a:	d140      	bne.n	80025ae <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800252c:	f7ff ff4a 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8002530:	6867      	ldr	r7, [r4, #4]
 8002532:	2519      	movs	r5, #25
 8002534:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002538:	fb05 f300 	mul.w	r3, r5, r0
 800253c:	00bf      	lsls	r7, r7, #2
 800253e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002542:	fbb3 f3f9 	udiv	r3, r3, r9
 8002546:	011f      	lsls	r7, r3, #4
 8002548:	f7ff ff3c 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800254c:	6863      	ldr	r3, [r4, #4]
 800254e:	4368      	muls	r0, r5
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	fbb0 f8f3 	udiv	r8, r0, r3
 8002556:	f7ff ff35 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	4368      	muls	r0, r5
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb0 f3f3 	udiv	r3, r0, r3
 8002564:	fbb3 f3f9 	udiv	r3, r3, r9
 8002568:	fb09 8313 	mls	r3, r9, r3, r8
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	fbb3 f3f9 	udiv	r3, r3, r9
 8002574:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002578:	f7ff ff24 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800257c:	6862      	ldr	r2, [r4, #4]
 800257e:	4368      	muls	r0, r5
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	fbb0 faf2 	udiv	sl, r0, r2
 8002586:	f7ff ff1d 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	4368      	muls	r0, r5
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fbb0 f3f3 	udiv	r3, r0, r3
 8002594:	fbb3 f3f9 	udiv	r3, r3, r9
 8002598:	fb09 a313 	mls	r3, r9, r3, sl
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	3332      	adds	r3, #50	; 0x32
 80025a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	ea43 0308 	orr.w	r3, r3, r8
 80025ac:	e783      	b.n	80024b6 <UART_SetConfig+0xd2>
 80025ae:	f7ff fef9 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80025b2:	6867      	ldr	r7, [r4, #4]
 80025b4:	2519      	movs	r5, #25
 80025b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025ba:	fb05 f300 	mul.w	r3, r5, r0
 80025be:	00bf      	lsls	r7, r7, #2
 80025c0:	fbb3 f3f7 	udiv	r3, r3, r7
 80025c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80025c8:	011f      	lsls	r7, r3, #4
 80025ca:	f7ff feeb 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	4368      	muls	r0, r5
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fbb0 f8f3 	udiv	r8, r0, r3
 80025d8:	f7ff fee4 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	4368      	muls	r0, r5
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80025ea:	fb09 8313 	mls	r3, r9, r3, r8
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80025f6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80025fa:	f7ff fed3 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80025fe:	6862      	ldr	r2, [r4, #4]
 8002600:	4368      	muls	r0, r5
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	fbb0 faf2 	udiv	sl, r0, r2
 8002608:	f7ff fecc 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800260c:	e7bd      	b.n	800258a <UART_SetConfig+0x1a6>
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400

08002618 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	4604      	mov	r4, r0
 800261c:	460e      	mov	r6, r1
 800261e:	4617      	mov	r7, r2
 8002620:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002622:	6821      	ldr	r1, [r4, #0]
 8002624:	680b      	ldr	r3, [r1, #0]
 8002626:	ea36 0303 	bics.w	r3, r6, r3
 800262a:	d101      	bne.n	8002630 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800262c:	2000      	movs	r0, #0
}
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002630:	1c6b      	adds	r3, r5, #1
 8002632:	d0f7      	beq.n	8002624 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002634:	b995      	cbnz	r5, 800265c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800263e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002648:	2320      	movs	r3, #32
 800264a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002652:	2300      	movs	r3, #0
 8002654:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002658:	2003      	movs	r0, #3
 800265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800265c:	f7fd ff8e 	bl	800057c <HAL_GetTick>
 8002660:	1bc0      	subs	r0, r0, r7
 8002662:	4285      	cmp	r5, r0
 8002664:	d2dd      	bcs.n	8002622 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002666:	e7e6      	b.n	8002636 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002668 <HAL_UART_Init>:
{
 8002668:	b510      	push	{r4, lr}
  if (huart == NULL)
 800266a:	4604      	mov	r4, r0
 800266c:	b340      	cbz	r0, 80026c0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800266e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002676:	b91b      	cbnz	r3, 8002680 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002678:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800267c:	f000 fac0 	bl	8002c00 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002680:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002682:	2324      	movs	r3, #36	; 0x24
 8002684:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002688:	68d3      	ldr	r3, [r2, #12]
 800268a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800268e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fea7 	bl	80023e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80026b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80026be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
}
 80026c2:	bd10      	pop	{r4, pc}

080026c4 <HAL_UART_Transmit>:
{
 80026c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80026ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026ce:	2b20      	cmp	r3, #32
{
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80026d6:	d14f      	bne.n	8002778 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80026d8:	2900      	cmp	r1, #0
 80026da:	d04a      	beq.n	8002772 <HAL_UART_Transmit+0xae>
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d048      	beq.n	8002772 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80026e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d047      	beq.n	8002778 <HAL_UART_Transmit+0xb4>
 80026e8:	2301      	movs	r3, #1
 80026ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f2:	2321      	movs	r3, #33	; 0x21
 80026f4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80026f8:	f7fd ff40 	bl	800057c <HAL_GetTick>
    huart->TxXferSize = Size;
 80026fc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002700:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002702:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002706:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002708:	b29b      	uxth	r3, r3
 800270a:	b96b      	cbnz	r3, 8002728 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	4632      	mov	r2, r6
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff ff80 	bl	8002618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002718:	b9b0      	cbnz	r0, 8002748 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800271a:	2320      	movs	r3, #32
 800271c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002720:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002728:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800272a:	3b01      	subs	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002730:	68a3      	ldr	r3, [r4, #8]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	4632      	mov	r2, r6
 8002738:	463b      	mov	r3, r7
 800273a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800273e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002740:	d10e      	bne.n	8002760 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	f7ff ff69 	bl	8002618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002746:	b110      	cbz	r0, 800274e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002748:	2003      	movs	r0, #3
 800274a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800274e:	882b      	ldrh	r3, [r5, #0]
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002758:	6923      	ldr	r3, [r4, #16]
 800275a:	b943      	cbnz	r3, 800276e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800275c:	3502      	adds	r5, #2
 800275e:	e7d2      	b.n	8002706 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	f7ff ff5a 	bl	8002618 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002764:	2800      	cmp	r0, #0
 8002766:	d1ef      	bne.n	8002748 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	782a      	ldrb	r2, [r5, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	3501      	adds	r5, #1
 8002770:	e7c9      	b.n	8002706 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002772:	2001      	movs	r0, #1
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002778:	2002      	movs	r0, #2
}
 800277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800277e <eeprom_init>:
 */
#include "eeprom.h"

EEprom_HandleTypeDef eeprom_init(I2C_HandleTypeDef* i2c_handel,
		uint16_t write_address[], uint16_t read_address[], uint16_t i2c_memSize,
		uint16_t block_size) {
 800277e:	b510      	push	{r4, lr}
	EEprom_.i2c_handel = i2c_handel;
	EEprom_.write_address = write_address;
	EEprom_.read_address = read_address;
	EEprom_.i2c_memSize = i2c_memSize;
	EEprom_.block_size = block_size;
	return EEprom_;
 8002780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002784:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8002788:	8183      	strh	r3, [r0, #12]
 800278a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800278e:	81c3      	strh	r3, [r0, #14]
}
 8002790:	bd10      	pop	{r4, pc}

08002792 <eeprom_write_pages>:

HAL_StatusTypeDef eeprom_write_pages(EEprom_HandleTypeDef *eeprom,
		uint8_t *pData, uint16_t Size) {
 8002792:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t address = 0, segment = 0;
	uint16_t counter = 0;
	while (counter < Size - 1) {
 8002796:	2600      	movs	r6, #0
		uint8_t *pData, uint16_t Size) {
 8002798:	4607      	mov	r7, r0
 800279a:	4689      	mov	r9, r1
	uint8_t address = 0, segment = 0;
 800279c:	4635      	mov	r5, r6
 800279e:	4634      	mov	r4, r6
	while (counter < Size - 1) {
 80027a0:	f102 38ff 	add.w	r8, r2, #4294967295
		if (counter == eeprom->block_size * segment) {
			segment++;
			address = 0;
		}
		if(HAL_I2C_Mem_Write_DMA(eeprom->i2c_handel,eeprom->write_address[0+segment-1], 0x00+address,eeprom->i2c_memSize, &pData[counter], sizeof(pData[counter]))==HAL_ERROR)
 80027a4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
	while (counter < Size - 1) {
 80027a8:	b2b2      	uxth	r2, r6
 80027aa:	4542      	cmp	r2, r8
 80027ac:	db03      	blt.n	80027b6 <eeprom_write_pages+0x24>
		}
		counter++;
		address++;
		HAL_Delay(3);
	}
return HAL_OK;
 80027ae:	2000      	movs	r0, #0
}
 80027b0:	b002      	add	sp, #8
 80027b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (counter == eeprom->block_size * segment) {
 80027b6:	89fb      	ldrh	r3, [r7, #14]
		if(HAL_I2C_Mem_Write_DMA(eeprom->i2c_handel,eeprom->write_address[0+segment-1], 0x00+address,eeprom->i2c_memSize, &pData[counter], sizeof(pData[counter]))==HAL_ERROR)
 80027b8:	6878      	ldr	r0, [r7, #4]
		if (counter == eeprom->block_size * segment) {
 80027ba:	436b      	muls	r3, r5
 80027bc:	429a      	cmp	r2, r3
			segment++;
 80027be:	bf04      	itt	eq
 80027c0:	3501      	addeq	r5, #1
 80027c2:	b2ed      	uxtbeq	r5, r5
		if(HAL_I2C_Mem_Write_DMA(eeprom->i2c_handel,eeprom->write_address[0+segment-1], 0x00+address,eeprom->i2c_memSize, &pData[counter], sizeof(pData[counter]))==HAL_ERROR)
 80027c4:	eb05 010a 	add.w	r1, r5, sl
 80027c8:	444a      	add	r2, r9
 80027ca:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80027ce:	89bb      	ldrh	r3, [r7, #12]
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	f04f 0001 	mov.w	r0, #1
			address = 0;
 80027d6:	bf08      	it	eq
 80027d8:	2400      	moveq	r4, #0
		if(HAL_I2C_Mem_Write_DMA(eeprom->i2c_handel,eeprom->write_address[0+segment-1], 0x00+address,eeprom->i2c_memSize, &pData[counter], sizeof(pData[counter]))==HAL_ERROR)
 80027da:	9001      	str	r0, [sp, #4]
 80027dc:	4622      	mov	r2, r4
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f7fe fbee 	bl	8000fc0 <HAL_I2C_Mem_Write_DMA>
 80027e4:	2801      	cmp	r0, #1
 80027e6:	f106 0601 	add.w	r6, r6, #1
 80027ea:	d0e1      	beq.n	80027b0 <eeprom_write_pages+0x1e>
		address++;
 80027ec:	3401      	adds	r4, #1
		HAL_Delay(3);
 80027ee:	2003      	movs	r0, #3
		address++;
 80027f0:	b2e4      	uxtb	r4, r4
		HAL_Delay(3);
 80027f2:	f7fd fec9 	bl	8000588 <HAL_Delay>
 80027f6:	e7d7      	b.n	80027a8 <eeprom_write_pages+0x16>

080027f8 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(EEprom_HandleTypeDef *eeprom,
		uint16_t block_select, uint16_t MemAddress, uint8_t *pData,
		uint16_t Size) {
 80027f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return HAL_I2C_Mem_Write_DMA(eeprom->i2c_handel,
 80027fa:	6845      	ldr	r5, [r0, #4]
 80027fc:	8984      	ldrh	r4, [r0, #12]
 80027fe:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 8002802:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8002806:	e88d 0028 	stmia.w	sp, {r3, r5}
 800280a:	4623      	mov	r3, r4
 800280c:	6800      	ldr	r0, [r0, #0]
 800280e:	f7fe fbd7 	bl	8000fc0 <HAL_I2C_Mem_Write_DMA>
			eeprom->write_address[block_select], MemAddress,
			eeprom->i2c_memSize, pData, Size);
}
 8002812:	b003      	add	sp, #12
 8002814:	bd30      	pop	{r4, r5, pc}

08002816 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(EEprom_HandleTypeDef *eeprom,
		uint16_t block_select, uint16_t MemAddress, uint8_t *pData,
		uint16_t Size) {
 8002816:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return HAL_I2C_Mem_Read_DMA(eeprom->i2c_handel,
 8002818:	6885      	ldr	r5, [r0, #8]
 800281a:	8984      	ldrh	r4, [r0, #12]
 800281c:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 8002820:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8002824:	e88d 0028 	stmia.w	sp, {r3, r5}
 8002828:	4623      	mov	r3, r4
 800282a:	6800      	ldr	r0, [r0, #0]
 800282c:	f7fe fc6a 	bl	8001104 <HAL_I2C_Mem_Read_DMA>
			eeprom->read_address[block_select], MemAddress, eeprom->i2c_memSize,
			*(&pData), Size);
}
 8002830:	b003      	add	sp, #12
 8002832:	bd30      	pop	{r4, r5, pc}

08002834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002834:	b530      	push	{r4, r5, lr}
 8002836:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002838:	2230      	movs	r2, #48	; 0x30
 800283a:	2100      	movs	r1, #0
 800283c:	a808      	add	r0, sp, #32
 800283e:	f000 fab8 	bl	8002db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002842:	2100      	movs	r1, #0
 8002844:	2214      	movs	r2, #20
 8002846:	a803      	add	r0, sp, #12
 8002848:	f000 fab3 	bl	8002db2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	2400      	movs	r4, #0
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <SystemClock_Config+0x88>)
 8002850:	9401      	str	r4, [sp, #4]
 8002852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002854:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <SystemClock_Config+0x8c>)
 8002866:	9402      	str	r4, [sp, #8]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002872:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800287c:	2301      	movs	r3, #1
 800287e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002880:	2310      	movs	r3, #16
 8002882:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002884:	2308      	movs	r3, #8
 8002886:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002888:	2364      	movs	r3, #100	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800288a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 100;
 800288c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002890:	2304      	movs	r3, #4
 8002892:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002894:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002896:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002898:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289a:	f7ff fb39 	bl	8001f10 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289e:	230f      	movs	r3, #15
 80028a0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028a2:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028a8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028aa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ac:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ae:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028b2:	f7ff fcdd 	bl	8002270 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80028b6:	b015      	add	sp, #84	; 0x54
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000

080028c4 <main>:
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	f5ad 6d05 	sub.w	sp, sp, #2128	; 0x850
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	2400      	movs	r4, #0
 80028cc:	4d6c      	ldr	r5, [pc, #432]	; (8002a80 <main+0x1bc>)
  huart2.Instance = USART2;
 80028ce:	4e6d      	ldr	r6, [pc, #436]	; (8002a84 <main+0x1c0>)
  HAL_Init();
 80028d0:	f7fd fe2e 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 80028d4:	f7ff ffae 	bl	8002834 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	2214      	movs	r2, #20
 80028da:	2100      	movs	r1, #0
 80028dc:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80028e0:	f000 fa67 	bl	8002db2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	9408      	str	r4, [sp, #32]
 80028e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028e8:	4867      	ldr	r0, [pc, #412]	; (8002a88 <main+0x1c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	632b      	str	r3, [r5, #48]	; 0x30
 80028f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	9308      	str	r3, [sp, #32]
 80028f8:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	9409      	str	r4, [sp, #36]	; 0x24
 80028fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	632b      	str	r3, [r5, #48]	; 0x30
 8002904:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	9309      	str	r3, [sp, #36]	; 0x24
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	940a      	str	r4, [sp, #40]	; 0x28
 8002910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002912:	f043 0302 	orr.w	r3, r3, #2
 8002916:	632b      	str	r3, [r5, #48]	; 0x30
 8002918:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800291e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002922:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002926:	f7fe f927 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800292a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800292e:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002932:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002936:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <main+0x1c8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002938:	4855      	ldr	r0, [pc, #340]	; (8002a90 <main+0x1cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800293a:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002946:	f7fe f841 	bl	80009cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800294a:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800294c:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 8002950:	484d      	ldr	r0, [pc, #308]	; (8002a88 <main+0x1c4>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8002952:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002956:	f8cd 8450 	str.w	r8, [sp, #1104]	; 0x450
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	f8cd 4458 	str.w	r4, [sp, #1112]	; 0x458
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002962:	f7fe f833 	bl	80009cc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002966:	9407      	str	r4, [sp, #28]
 8002968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800296a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800296e:	632b      	str	r3, [r5, #48]	; 0x30
 8002970:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8002972:	4d48      	ldr	r5, [pc, #288]	; (8002a94 <main+0x1d0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002978:	4622      	mov	r2, r4
 800297a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800297c:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800297e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002980:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002982:	f7fd fe27 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002986:	200b      	movs	r0, #11
 8002988:	f7fd fe58 	bl	800063c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800298c:	4621      	mov	r1, r4
 800298e:	4622      	mov	r2, r4
 8002990:	200c      	movs	r0, #12
 8002992:	f7fd fe1f 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002996:	200c      	movs	r0, #12
 8002998:	f7fd fe50 	bl	800063c <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800299c:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <main+0x1d4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	60b4      	str	r4, [r6, #8]
  huart2.Init.BaudRate = 115200;
 80029a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80029a4:	e886 000c 	stmia.w	r6, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029a8:	4630      	mov	r0, r6
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029aa:	230c      	movs	r3, #12
 80029ac:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029ae:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029b0:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b4:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b6:	f7ff fe57 	bl	8002668 <HAL_UART_Init>
  hi2c1.Init.ClockSpeed = 400000;
 80029ba:	4938      	ldr	r1, [pc, #224]	; (8002a9c <main+0x1d8>)
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <main+0x1dc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029be:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.ClockSpeed = 400000;
 80029c0:	e885 000a 	stmia.w	r5, {r1, r3}
	char memory_dump[1024] = {0}; //8kbit
 80029c4:	f44f 6980 	mov.w	r9, #1024	; 0x400
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029cc:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ce:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80029d0:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d2:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029d4:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d6:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d8:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029da:	f7fe fa4d 	bl	8000e78 <HAL_I2C_Init>
	char memory_dump[1024] = {0}; //8kbit
 80029de:	464a      	mov	r2, r9
 80029e0:	4621      	mov	r1, r4
 80029e2:	a813      	add	r0, sp, #76	; 0x4c
 80029e4:	f000 f9e5 	bl	8002db2 <memset>
	char example_1 = *"T";
 80029e8:	2354      	movs	r3, #84	; 0x54
	char example
 80029ea:	f240 4201 	movw	r2, #1025	; 0x401
 80029ee:	492d      	ldr	r1, [pc, #180]	; (8002aa4 <main+0x1e0>)
	char example_1 = *"T";
 80029f0:	f88d 301b 	strb.w	r3, [sp, #27]
	char example
 80029f4:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80029f8:	f000 f9d0 	bl	8002d9c <memcpy>
	uint16_t write_address[] = { 0xA0, 0xA2, 0xA4, 0xA6 };
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <main+0x1e4>)
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a04:	c203      	stmia	r2!, {r0, r1}
	uint16_t read_address[] = { 0xA1, 0xA3, 0xA5, 0xA7 };
 8002a06:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8002a0a:	6859      	ldr	r1, [r3, #4]
	EEprom_ = eeprom_init(&hi2c1, write_address, read_address,I2C_MEMADD_SIZE_8BIT, 256);
 8002a0c:	f10d 0a08 	add.w	sl, sp, #8
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
	uint16_t read_address[] = { 0xA1, 0xA3, 0xA5, 0xA7 };
 8002a14:	aa0d      	add	r2, sp, #52	; 0x34
 8002a16:	c203      	stmia	r2!, {r0, r1}
	EEprom_ = eeprom_init(&hi2c1, write_address, read_address,I2C_MEMADD_SIZE_8BIT, 256);
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a1c:	ab0d      	add	r3, sp, #52	; 0x34
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4650      	mov	r0, sl
 8002a22:	f8cd 8000 	str.w	r8, [sp]
 8002a26:	f7ff feaa 	bl	800277e <eeprom_init>
 8002a2a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8002a2e:	af0f      	add	r7, sp, #60	; 0x3c
 8002a30:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	eeprom_write(&EEprom_, 0, 0x00, (uint8_t*) &example_1,sizeof(example_1));
 8002a34:	f10d 031b 	add.w	r3, sp, #27
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	f8cd 8000 	str.w	r8, [sp]
 8002a40:	4638      	mov	r0, r7
 8002a42:	f7ff fed9 	bl	80027f8 <eeprom_write>
	eeprom_write_pages(&EEprom_, (uint8_t*) &example_2,sizeof(example_2));
 8002a46:	f240 4201 	movw	r2, #1025	; 0x401
 8002a4a:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 8002a4e:	4638      	mov	r0, r7
 8002a50:	f7ff fe9f 	bl	8002792 <eeprom_write_pages>
	HAL_Delay(10);
 8002a54:	200a      	movs	r0, #10
 8002a56:	f7fd fd97 	bl	8000588 <HAL_Delay>
	eeprom_read(&EEprom_, 0, 0x00, (uint8_t*) &memory_dump,sizeof(memory_dump));
 8002a5a:	ab13      	add	r3, sp, #76	; 0x4c
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f8cd 9000 	str.w	r9, [sp]
 8002a64:	4638      	mov	r0, r7
 8002a66:	f7ff fed6 	bl	8002816 <eeprom_read>
	HAL_Delay(10);
 8002a6a:	200a      	movs	r0, #10
 8002a6c:	f7fd fd8c 	bl	8000588 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*) &memory_dump, sizeof(memory_dump),0xffffff);
 8002a70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a74:	464a      	mov	r2, r9
 8002a76:	a913      	add	r1, sp, #76	; 0x4c
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f7ff fe23 	bl	80026c4 <HAL_UART_Transmit>
 8002a7e:	e7fe      	b.n	8002a7e <main+0x1ba>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	20000140 	.word	0x20000140
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	10210000 	.word	0x10210000
 8002a90:	40020800 	.word	0x40020800
 8002a94:	2000008c 	.word	0x2000008c
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	00061a80 	.word	0x00061a80
 8002aa4:	08002df4 	.word	0x08002df4
 8002aa8:	08002ddc 	.word	0x08002ddc

08002aac <HAL_I2C_MemTxCpltCallback>:
 8002aac:	4770      	bx	lr

08002aae <HAL_I2C_MemRxCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
//	my_printf("HAL_I2C_MemTxCpltCallback");

}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002aae:	4770      	bx	lr

08002ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_MspInit+0x3c>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	9100      	str	r1, [sp, #0]
 8002abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	9101      	str	r1, [sp, #4]
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ae0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ae4:	f7fd fd64 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae8:	b003      	add	sp, #12
 8002aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	4606      	mov	r6, r0
 8002af8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	2214      	movs	r2, #20
 8002afc:	2100      	movs	r1, #0
 8002afe:	a803      	add	r0, sp, #12
 8002b00:	f000 f957 	bl	8002db2 <memset>
  if(hi2c->Instance==I2C1)
 8002b04:	6832      	ldr	r2, [r6, #0]
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_I2C_MspInit+0xf0>)
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d168      	bne.n	8002bde <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	4c36      	ldr	r4, [pc, #216]	; (8002be8 <HAL_I2C_MspInit+0xf4>)
 8002b10:	9501      	str	r5, [sp, #4]
 8002b12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	4835      	ldr	r0, [pc, #212]	; (8002bec <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2c:	2312      	movs	r3, #18
 8002b2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f7fd ff45 	bl	80009cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b42:	9502      	str	r5, [sp, #8]
 8002b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b4a:	6423      	str	r3, [r4, #64]	; 0x40
 8002b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002b4e:	4c28      	ldr	r4, [pc, #160]	; (8002bf0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_I2C_MspInit+0x100>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5a:	60a5      	str	r5, [r4, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002b5c:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8002b60:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b6a:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b6c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b70:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b72:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b74:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b76:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b78:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b7a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b7c:	f7fd fd98 	bl	80006b0 <HAL_DMA_Init>
 8002b80:	b108      	cbz	r0, 8002b86 <HAL_I2C_MspInit+0x92>
    {
      Error_Handler();
 8002b82:	f7ff ff95 	bl	8002ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002b86:	63b4      	str	r4, [r6, #56]	; 0x38
 8002b88:	63a6      	str	r6, [r4, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002b8a:	4c1b      	ldr	r4, [pc, #108]	; (8002bf8 <HAL_I2C_MspInit+0x104>)
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_I2C_MspInit+0x108>)
 8002b8e:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b90:	2240      	movs	r2, #64	; 0x40
 8002b92:	60a2      	str	r2, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002b98:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9a:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b9c:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002ba2:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba4:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba8:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002baa:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bac:	6222      	str	r2, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bae:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002bb0:	f7fd fd7e 	bl	80006b0 <HAL_DMA_Init>
 8002bb4:	b108      	cbz	r0, 8002bba <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8002bb6:	f7ff ff7b 	bl	8002ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002bbe:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bc0:	201f      	movs	r0, #31
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002bc2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002bc4:	f7fd fd06 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bc8:	201f      	movs	r0, #31
 8002bca:	f7fd fd37 	bl	800063c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2020      	movs	r0, #32
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	f7fd fcfe 	bl	80005d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bd8:	2020      	movs	r0, #32
 8002bda:	f7fd fd2f 	bl	800063c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bde:	b008      	add	sp, #32
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	bf00      	nop
 8002be4:	40005400 	.word	0x40005400
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	200000e0 	.word	0x200000e0
 8002bf4:	40026010 	.word	0x40026010
 8002bf8:	2000002c 	.word	0x2000002c
 8002bfc:	40026028 	.word	0x40026028

08002c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c00:	b510      	push	{r4, lr}
 8002c02:	4604      	mov	r4, r0
 8002c04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c06:	2214      	movs	r2, #20
 8002c08:	2100      	movs	r1, #0
 8002c0a:	a803      	add	r0, sp, #12
 8002c0c:	f000 f8d1 	bl	8002db2 <memset>
  if(huart->Instance==USART2)
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_UART_MspInit+0x68>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d124      	bne.n	8002c62 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c18:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	9101      	str	r1, [sp, #4]
 8002c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	4812      	ldr	r0, [pc, #72]	; (8002c6c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	9102      	str	r1, [sp, #8]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	9302      	str	r3, [sp, #8]
 8002c46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c48:	230c      	movs	r3, #12
 8002c4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c50:	2301      	movs	r3, #1
 8002c52:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5e:	f7fd feb5 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c62:	b008      	add	sp, #32
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	bf00      	nop
 8002c68:	40004400 	.word	0x40004400
 8002c6c:	40020000 	.word	0x40020000

08002c70 <NMI_Handler>:
 8002c70:	4770      	bx	lr

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	e7fe      	b.n	8002c74 <MemManage_Handler>

08002c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler>

08002c7a <SVC_Handler>:
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:
 8002c7c:	4770      	bx	lr

08002c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7e:	4770      	bx	lr

08002c80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c80:	f7fd bc70 	b.w	8000564 <HAL_IncTick>

08002c84 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <DMA1_Stream0_IRQHandler+0x8>)
 8002c86:	f7fd bde1 	b.w	800084c <HAL_DMA_IRQHandler>
 8002c8a:	bf00      	nop
 8002c8c:	200000e0 	.word	0x200000e0

08002c90 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <DMA1_Stream1_IRQHandler+0x8>)
 8002c92:	f7fd bddb 	b.w	800084c <HAL_DMA_IRQHandler>
 8002c96:	bf00      	nop
 8002c98:	2000002c 	.word	0x2000002c

08002c9c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <I2C1_EV_IRQHandler+0x8>)
 8002c9e:	f7fe bc7d 	b.w	800159c <HAL_I2C_EV_IRQHandler>
 8002ca2:	bf00      	nop
 8002ca4:	2000008c 	.word	0x2000008c

08002ca8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <I2C1_ER_IRQHandler+0x8>)
 8002caa:	f7ff b89b 	b.w	8001de4 <HAL_I2C_ER_IRQHandler>
 8002cae:	bf00      	nop
 8002cb0:	2000008c 	.word	0x2000008c

08002cb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <SystemInit+0x40>)
 8002cb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <SystemInit+0x44>)
 8002cc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cc6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <SystemInit+0x48>)
 8002cde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ce8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cee:	608b      	str	r3, [r1, #8]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	24003010 	.word	0x24003010

08002d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d06:	e003      	b.n	8002d10 <LoopCopyDataInit>

08002d08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d0e:	3104      	adds	r1, #4

08002d10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d18:	d3f6      	bcc.n	8002d08 <CopyDataInit>
  ldr  r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d1c:	e002      	b.n	8002d24 <LoopFillZerobss>

08002d1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d20:	f842 3b04 	str.w	r3, [r2], #4

08002d24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d28:	d3f9      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2a:	f7ff ffc3 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f000 f811 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d32:	f7ff fdc7 	bl	80028c4 <main>
  bx  lr    
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d3c:	08003220 	.word	0x08003220
  ldr  r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d44:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002d48:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002d4c:	20000180 	.word	0x20000180

08002d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC_IRQHandler>
	...

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4e0d      	ldr	r6, [pc, #52]	; (8002d8c <__libc_init_array+0x38>)
 8002d58:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5a:	1ba4      	subs	r4, r4, r6
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	2500      	movs	r5, #0
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	4e0b      	ldr	r6, [pc, #44]	; (8002d94 <__libc_init_array+0x40>)
 8002d66:	4c0c      	ldr	r4, [pc, #48]	; (8002d98 <__libc_init_array+0x44>)
 8002d68:	f000 f82c 	bl	8002dc4 <_init>
 8002d6c:	1ba4      	subs	r4, r4, r6
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	2500      	movs	r5, #0
 8002d72:	42a5      	cmp	r5, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d86:	4798      	blx	r3
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08003218 	.word	0x08003218
 8002d90:	08003218 	.word	0x08003218
 8002d94:	08003218 	.word	0x08003218
 8002d98:	0800321c 	.word	0x0800321c

08002d9c <memcpy>:
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	1e43      	subs	r3, r0, #1
 8002da0:	440a      	add	r2, r1
 8002da2:	4291      	cmp	r1, r2
 8002da4:	d100      	bne.n	8002da8 <memcpy+0xc>
 8002da6:	bd10      	pop	{r4, pc}
 8002da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db0:	e7f7      	b.n	8002da2 <memcpy+0x6>

08002db2 <memset>:
 8002db2:	4402      	add	r2, r0
 8002db4:	4603      	mov	r3, r0
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d100      	bne.n	8002dbc <memset+0xa>
 8002dba:	4770      	bx	lr
 8002dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc0:	e7f9      	b.n	8002db6 <memset+0x4>
	...

08002dc4 <_init>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr

08002dd0 <_fini>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr
